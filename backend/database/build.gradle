plugins {
    id 'java-library'
    id 'org.liquibase.gradle' version '2.2.0'
    id "org.jooq.jooq-codegen-gradle" version "3.19.1"
}

apply plugin: 'java-library'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'org.jooq.jooq-codegen-gradle'

dependencies {
    implementation "org.jooq:jooq:${jooqVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springbootStarterVersion}"
    implementation "org.springframework.boot:spring-boot-starter-jooq:${springbootStarterVersion}"
    
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.transaction:jakarta.transaction-api:2.0.1'

 	// jooq-codegen dependencies
    jooqCodegen 'org.jooq:jooq-meta-extensions:3.19.1'
    jooqCodegen 'org.jooq:jooq-meta-extensions-liquibase:3.19.1'
    jooqCodegen 'org.liquibase:liquibase-core:4.24.0'
    jooqCodegen 'org.slf4j:slf4j-jdk14:1.7.30'  

    // Liquidbase dependencies
    liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
    liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.postgresql:postgresql'
}

liquibase {
    //jvmArgs "-Duser.dir=$project.projectDir/src/main/resources/liquibase"
    activities {
        main {
            //propsFile "liquibase.properties"
            changelogFile "$project.projectDir/src/main/resources/liquibase/db/changelog/db.changelog-master.sql"
            url "jdbc:postgresql://localhost:5432/waltz"
            username "waltz"
            password "waltz"
            logLevel "info"
        }
    }
    //runList = 'main'
}

jooq {
    //jvmArgs "-Duser.dir=$project.projectDir/src/main/resources/liquibase"
    configuration {
        generator {
            database {
                name = "org.jooq.meta.extensions.liquibase.LiquibaseDatabase"
                properties {

                    // Specify the root path, e.g. a path in your Maven directory layout
                    property {
                        key = "rootPath"
                        value = "$project.projectDir/src/main/resources"
                    }

                    // Specify the relative path location of your XML, YAML, or JSON script.
                    property {
                        key = "scripts"
                        value = "liquibase/db/changelog/db.changelog-master.sql"
                    }
                }
                
                includeTables = true
      			includeSystemTables = false
      			includeInvisibleColumns = false
      			includeEmbeddables = false
      			includeRoutines = false
      			includePackages = false
      			includePackageRoutines = false
      			includePackageUDTs = false
      			includePackageConstants = false
      			includeUDTs = false
      			includeDomains = false
      			includeSequences = false
      			includeSystemSequences = false
      			includePrimaryKeys = false
      			includeUniqueKeys = false
      			includeForeignKeys = false
      			includeCheckConstraints = false
      			includeSystemCheckConstraints = false
     			includeIndexes = false
      			includeSystemIndexes = false
      			
      			forceIntegerTypesOnZeroScaleDecimals = true
            }
            
            generate {
      			generatedAnnotation = true
      			// Possible values for generatedAnnotationType
      			// - DETECT_FROM_JDK
      			// - JAVAX_ANNOTATION_GENERATED
      			// - JAVAX_ANNOTATION_PROCESSING_GENERATED
      			// - ORG_JOOQ_GENERATED
      			generatedAnnotationDate = true
      			generatedAnnotationType = "DETECT_FROM_JDK"
      			//generatedAnnotationJooqVersion = true
      			nullableAnnotation = true
      			nullableAnnotationType = "jakarta.annotation.Nullable"
      			nonnullAnnotation = true
      			nonnullAnnotationType = "jakarta.annotation.Nonnull"
      			jpaAnnotations = true
      			jpaVersion = 3.1
      			validationAnnotations = true

      			// The springDao flag enables the generation of @Transactional annotations on a
      			// generated, Spring-specific DAO
      			// Annotate DAOs (and other types) with spring annotations, such as @Repository and @Autowired
      			// for auto-wiring the Configuration instance, e.g. from Spring Boot's jOOQ starter
      			springAnnotations = true
      			springDao = true
      			//kotlinSetterJvmNameAnnotationsOnIsPrefix = true
      			constructorPropertiesAnnotation = true
      			constructorPropertiesAnnotationOnPojos = true
      			constructorPropertiesAnnotationOnRecords = true  		
                
                // By default, jOOQ generated artefacts follow JavaBeans conventions, where setters return void. 
                // If that is not a hard requirement, fluent setters can be generated where the setter returns the 
                // record/interface/pojo itself. To activate this behaviour, use:
                fluentSetters = true
                
                // Allowing to turn off the feature for to-one join paths.
      			// The default is true.
      			implicitJoinPathsToOne = true

      			// Allowing to turn off the feature for to-many join paths (including many-to-many).
      			// The default is true.
      			implicitJoinPathsToMany = true

      			// Whether implicit join path constructors should also be generated if there
      			// isn't any outgoing or incoming foreign key relationship.
      			// The default is false.
      			implicitJoinPathUnusedConstructors = false

      			// Influencing how the DefaultGeneratorStrategy generates identifiers.
      			// The default is true.
      			// 
     			// When a child table has only one FK towards a parent table, then that path is "unambiguous."
      			// In that case, the DefaultGeneratorStrategy uses the parent table name instead of the FK name.
      			implicitJoinPathsUseTableNameForUnambiguousFKs = true
      			
      			javaTimeTypes = false
      			
      			sources = false
      			sourcesOnViews = false
      			
      			// Options include:
	      		// - DETECT_FROM_JDK (default, generate text blocks if Java version supports them)
	      		// - ON
      			// - OFF
      			textBlocks = "OFF"
      			
      			// Records
      			// This overrides existing primary key information to allow for "custom" primary key column sets, possibly promoting a TableRecord to an UpdatableRecord
      			records = true

				// This is needed as a prerequisite for navigation methods
				relations true

				// POJOs
				// Generate the DAO classes
				// POJOs are a pre-requisite for DAOs. If DAOs are generated, POJOs are generated as well
				daos = true

				// Immutable POJOs have final members and no setters. All members must be passed to the constructor
				immutablePojos true
				
				// If you're using the JavaGenerator, this will generate POJOs as (immutable) Java 16 record types
				pojosAsJavaRecordClasses true 
				
				// Whether POJOs should have a generated toString() implementation.
				pojosToString = true
				
				// Whether POJOs should have generated equals() and hashCode() implementations.
				pojosEqualsAndHashCode = true

				// Turn on the generation of interfaces
      			interfaces = true

      			// Generated interfaces will not expose mutable components of their implementations, such as setters
      			immutableInterfaces = true

      			// Whether generated interfaces are Serializable
      			serializableInterfaces = true
            }

            target {
                packageName = "com.silo.backend.database"
                directory = "$project.projectDir/src/main/java"
                encoding = "UTF-8"
      			locale = "en"
                clean = true
            }
        }
    }
}

task('deployChangeLog') {
    doFirst() {
        liquibase {
            activities {
                main {
                    changeLogFile System.properties.liquibaseChangeLogFile
                    contexts System.properties.liquibaseContexts
                }
            }
        }
    }
}
update.dependsOn('deployChangeLog')
//generateJooq.dependsOn('deploy changeLog')
//println project.properties['backend.url']
//project.tasks.each { println it.name }
//generateJooq.dependsOnupdate