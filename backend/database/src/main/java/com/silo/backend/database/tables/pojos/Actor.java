/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IActor;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * represents a non application entity, typically used in flows.  Examples
 * include exchanges, departments, counterpart organisations
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "actor"
)
public record Actor(
    @Nullable Long id,
    @Nonnull String name,
    @Nonnull String description,
    @Nullable Timestamp lastUpdatedAt,
    @Nonnull String lastUpdatedBy,
    @Nullable Boolean isExternal,
    @Nullable String provenance,
    @Nullable String externalId
) implements IActor {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>actor.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>actor.name</code>. short name identifying the actor
     * (i.e. Bank of England)
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>actor.description</code>. longer textual description of
     * the actor
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>actor.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Getter for <code>actor.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    /**
     * Getter for <code>actor.is_external</code>. flag to indicate whether this
     * is an internal actor (e.g. Chief Risk Officer) or external actor (e.g.
     * Bank of England)
     */
    @Column(name = "is_external")
    @Nullable
    @Override
    public Boolean getIsExternal() {
        return this.isExternal;
    }

    /**
     * Getter for <code>actor.provenance</code>. where did this actor record
     * originate, will be 'waltz' if provided via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    /**
     * Getter for <code>actor.external_id</code>. identifier this actor is known
     * by externally.  Should not change, unlike the name which may change.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return this.externalId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Actor other = (Actor) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.lastUpdatedAt == null) {
            if (other.lastUpdatedAt != null)
                return false;
        }
        else if (!this.lastUpdatedAt.equals(other.lastUpdatedAt))
            return false;
        if (this.lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!this.lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (this.isExternal == null) {
            if (other.isExternal != null)
                return false;
        }
        else if (!this.isExternal.equals(other.isExternal))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.lastUpdatedAt == null) ? 0 : this.lastUpdatedAt.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.isExternal == null) ? 0 : this.isExternal.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Actor (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(lastUpdatedAt);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(isExternal);
        sb.append(", ").append(provenance);
        sb.append(", ").append(externalId);

        sb.append(")");
        return sb.toString();
    }
}
