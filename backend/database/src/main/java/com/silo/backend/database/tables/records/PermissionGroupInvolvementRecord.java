/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.PermissionGroupInvolvement;
import com.silo.backend.database.tables.interfaces.IPermissionGroupInvolvement;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * links a group of involvements to a given operation on an entity kind
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "permission_group_involvement"
)
public class PermissionGroupInvolvementRecord extends TableRecordImpl<PermissionGroupInvolvementRecord> implements IPermissionGroupInvolvement {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>permission_group_involvement.permission_group_id</code>.
     * identifier of the permission group this association is tied to
     */
    public PermissionGroupInvolvementRecord setPermissionGroupId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.permission_group_id</code>.
     * identifier of the permission group this association is tied to
     */
    @Column(name = "permission_group_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getPermissionGroupId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>permission_group_involvement.involvement_group_id</code>.
     * identifier of the involvement group
     */
    public PermissionGroupInvolvementRecord setInvolvementGroupId(@Nullable Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>permission_group_involvement.involvement_group_id</code>.
     * identifier of the involvement group
     */
    @Column(name = "involvement_group_id")
    @Nullable
    @Override
    public Long getInvolvementGroupId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>permission_group_involvement.operation</code>. type of
     * operation this involvement group is allowed to perform (one of: ADD,
     * ATTEST, REMOVE, UPDATE, UNKNOWN)
     */
    public PermissionGroupInvolvementRecord setOperation(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.operation</code>. type of
     * operation this involvement group is allowed to perform (one of: ADD,
     * ATTEST, REMOVE, UPDATE, UNKNOWN)
     */
    @Column(name = "operation", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getOperation() {
        return (String) get(2);
    }

    /**
     * Setter for <code>permission_group_involvement.parent_kind</code>. kind of
     * the parent entity the change is related to e.g. APPLICATION
     */
    public PermissionGroupInvolvementRecord setParentKind(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.parent_kind</code>. kind of
     * the parent entity the change is related to e.g. APPLICATION
     */
    @Column(name = "parent_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getParentKind() {
        return (String) get(3);
    }

    /**
     * Setter for <code>permission_group_involvement.subject_kind</code>. kind
     * of the entity the change acting upon e.g. MEASURABLE_RATING
     */
    public PermissionGroupInvolvementRecord setSubjectKind(@Nullable String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.subject_kind</code>. kind
     * of the entity the change acting upon e.g. MEASURABLE_RATING
     */
    @Column(name = "subject_kind", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getSubjectKind() {
        return (String) get(4);
    }

    /**
     * Setter for <code>permission_group_involvement.qualifier_kind</code>. kind
     * of qualifier entity needed to specify a more specific permission e.g.
     * MEASURABLE_CATEGORY
     */
    public PermissionGroupInvolvementRecord setQualifierKind(@Nullable String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.qualifier_kind</code>. kind
     * of qualifier entity needed to specify a more specific permission e.g.
     * MEASURABLE_CATEGORY
     */
    @Column(name = "qualifier_kind", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getQualifierKind() {
        return (String) get(5);
    }

    /**
     * Setter for <code>permission_group_involvement.qualifier_id</code>.
     * identifier of the qualifier entity needed to specify a more specific
     * permission
     */
    public PermissionGroupInvolvementRecord setQualifierId(@Nullable Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_involvement.qualifier_id</code>.
     * identifier of the qualifier entity needed to specify a more specific
     * permission
     */
    @Column(name = "qualifier_id")
    @Nullable
    @Override
    public Long getQualifierId() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IPermissionGroupInvolvement from) {
        setPermissionGroupId(from.getPermissionGroupId());
        setInvolvementGroupId(from.getInvolvementGroupId());
        setOperation(from.getOperation());
        setParentKind(from.getParentKind());
        setSubjectKind(from.getSubjectKind());
        setQualifierKind(from.getQualifierKind());
        setQualifierId(from.getQualifierId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissionGroupInvolvementRecord
     */
    public PermissionGroupInvolvementRecord() {
        super(PermissionGroupInvolvement.PERMISSION_GROUP_INVOLVEMENT);
    }

    /**
     * Create a detached, initialised PermissionGroupInvolvementRecord
     */
    @ConstructorProperties({ "permissionGroupId", "involvementGroupId", "operation", "parentKind", "subjectKind", "qualifierKind", "qualifierId" })
    public PermissionGroupInvolvementRecord(@Nonnull Long permissionGroupId, @Nullable Long involvementGroupId, @Nullable String operation, @Nonnull String parentKind, @Nullable String subjectKind, @Nullable String qualifierKind, @Nullable Long qualifierId) {
        super(PermissionGroupInvolvement.PERMISSION_GROUP_INVOLVEMENT);

        setPermissionGroupId(permissionGroupId);
        setInvolvementGroupId(involvementGroupId);
        setOperation(operation);
        setParentKind(parentKind);
        setSubjectKind(subjectKind);
        setQualifierKind(qualifierKind);
        setQualifierId(qualifierId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PermissionGroupInvolvementRecord
     */
    public PermissionGroupInvolvementRecord(com.silo.backend.database.tables.pojos.PermissionGroupInvolvement value) {
        super(PermissionGroupInvolvement.PERMISSION_GROUP_INVOLVEMENT);

        if (value != null) {
            setPermissionGroupId(value.permissionGroupId());
            setInvolvementGroupId(value.involvementGroupId());
            setOperation(value.operation());
            setParentKind(value.parentKind());
            setSubjectKind(value.subjectKind());
            setQualifierKind(value.qualifierKind());
            setQualifierId(value.qualifierId());
            resetChangedOnNotNull();
        }
    }
}
