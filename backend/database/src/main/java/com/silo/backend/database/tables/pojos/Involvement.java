/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IInvolvement;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * defines a specific instance of an involvement kind between a person and an
 * entity (e.g. 'User X' is 'IT Owner' for 'APPLICATION/32')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "involvement"
)
public record Involvement(
    @Nonnull String entityKind,
    @Nonnull Long entityId,
    @Nonnull String employeeId,
    @Nullable String provenance,
    @Nonnull Long kindId,
    @Nullable Boolean isReadonly
) implements IInvolvement {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>involvement.entity_kind</code>. the kind of entity the
     * person is involved with
     */
    @Column(name = "entity_kind", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getEntityKind() {
        return this.entityKind;
    }

    /**
     * Getter for <code>involvement.entity_id</code>. the identifier of the
     * entity the person is involved with
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getEntityId() {
        return this.entityId;
    }

    /**
     * Getter for <code>involvement.employee_id</code>. reference to the person
     * involved with the entity
     */
    @Column(name = "employee_id", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Getter for <code>involvement.provenance</code>. where did this
     * involvement record originate, will be 'waltz' if provided via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    /**
     * Getter for <code>involvement.kind_id</code>. the type of involvement
     * between the person and the entity (e.g. 'IT Owner')
     */
    @Column(name = "kind_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getKindId() {
        return this.kindId;
    }

    /**
     * Getter for <code>involvement.is_readonly</code>. can this involvement be
     * edited/removed by users (e.g. set to true if externally mastered)
     */
    @Column(name = "is_readonly")
    @Nullable
    @Override
    public Boolean getIsReadonly() {
        return this.isReadonly;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Involvement other = (Involvement) obj;
        if (this.entityKind == null) {
            if (other.entityKind != null)
                return false;
        }
        else if (!this.entityKind.equals(other.entityKind))
            return false;
        if (this.entityId == null) {
            if (other.entityId != null)
                return false;
        }
        else if (!this.entityId.equals(other.entityId))
            return false;
        if (this.employeeId == null) {
            if (other.employeeId != null)
                return false;
        }
        else if (!this.employeeId.equals(other.employeeId))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        if (this.kindId == null) {
            if (other.kindId != null)
                return false;
        }
        else if (!this.kindId.equals(other.kindId))
            return false;
        if (this.isReadonly == null) {
            if (other.isReadonly != null)
                return false;
        }
        else if (!this.isReadonly.equals(other.isReadonly))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.entityKind == null) ? 0 : this.entityKind.hashCode());
        result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
        result = prime * result + ((this.employeeId == null) ? 0 : this.employeeId.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        result = prime * result + ((this.kindId == null) ? 0 : this.kindId.hashCode());
        result = prime * result + ((this.isReadonly == null) ? 0 : this.isReadonly.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Involvement (");

        sb.append(entityKind);
        sb.append(", ").append(entityId);
        sb.append(", ").append(employeeId);
        sb.append(", ").append(provenance);
        sb.append(", ").append(kindId);
        sb.append(", ").append(isReadonly);

        sb.append(")");
        return sb.toString();
    }
}
