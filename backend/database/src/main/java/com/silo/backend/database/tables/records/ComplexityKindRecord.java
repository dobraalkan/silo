/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.ComplexityKind;
import com.silo.backend.database.tables.interfaces.IComplexityKind;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * complexity can be used to give a decimal score for an entity in waltz against
 * a complexity kind (e.g. Flow Complexity). The complexity kind describes the
 * type of complexity being evaluated.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "complexity_kind"
)
public class ComplexityKindRecord extends TableRecordImpl<ComplexityKindRecord> implements IComplexityKind {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>complexity_kind.id</code>. unique identifier for this
     * complexity kind record within waltz
     */
    public ComplexityKindRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>complexity_kind.id</code>. unique identifier for this
     * complexity kind record within waltz
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>complexity_kind.name</code>. the name of this complexity
     * kind
     */
    public ComplexityKindRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>complexity_kind.name</code>. the name of this complexity
     * kind
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>complexity_kind.description</code>. longer description
     * to provide more information about this complexity kind
     */
    public ComplexityKindRecord setDescription(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>complexity_kind.description</code>. longer description
     * to provide more information about this complexity kind
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>complexity_kind.external_id</code>. external identifier
     * for this complexity kind
     */
    public ComplexityKindRecord setExternalId(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>complexity_kind.external_id</code>. external identifier
     * for this complexity kind
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>complexity_kind.is_default</code>. indicates the
     * complexity kind to be shown on the entity overview by default
     */
    public ComplexityKindRecord setIsDefault(@Nullable Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>complexity_kind.is_default</code>. indicates the
     * complexity kind to be shown on the entity overview by default
     */
    @Column(name = "is_default")
    @Nullable
    @Override
    public Boolean getIsDefault() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IComplexityKind from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
        setExternalId(from.getExternalId());
        setIsDefault(from.getIsDefault());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ComplexityKindRecord
     */
    public ComplexityKindRecord() {
        super(ComplexityKind.COMPLEXITY_KIND);
    }

    /**
     * Create a detached, initialised ComplexityKindRecord
     */
    @ConstructorProperties({ "id", "name", "description", "externalId", "isDefault" })
    public ComplexityKindRecord(@Nullable Long id, @Nonnull String name, @Nullable String description, @Nullable String externalId, @Nullable Boolean isDefault) {
        super(ComplexityKind.COMPLEXITY_KIND);

        setId(id);
        setName(name);
        setDescription(description);
        setExternalId(externalId);
        setIsDefault(isDefault);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ComplexityKindRecord
     */
    public ComplexityKindRecord(com.silo.backend.database.tables.pojos.ComplexityKind value) {
        super(ComplexityKind.COMPLEXITY_KIND);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setDescription(value.description());
            setExternalId(value.externalId());
            setIsDefault(value.isDefault());
            resetChangedOnNotNull();
        }
    }
}
