/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.OrganisationalUnitRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrganisationalUnit extends TableImpl<OrganisationalUnitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>organisational_unit</code>
     */
    public static final OrganisationalUnit ORGANISATIONAL_UNIT = new OrganisationalUnit();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<OrganisationalUnitRecord> getRecordType() {
        return OrganisationalUnitRecord.class;
    }

    /**
     * The column <code>organisational_unit.id</code>.
     */
    public final TableField<OrganisationalUnitRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>organisational_unit.name</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>organisational_unit.description</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>organisational_unit.parent_id</code>.
     */
    public final TableField<OrganisationalUnitRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>organisational_unit.created_at</code>.
     */
    public final TableField<OrganisationalUnitRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>organisational_unit.last_updated_at</code>.
     */
    public final TableField<OrganisationalUnitRecord, Timestamp> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    /**
     * The column <code>organisational_unit.external_id</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>organisational_unit.created_by</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>organisational_unit.last_updated_by</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>organisational_unit.provenance</code>.
     */
    public final TableField<OrganisationalUnitRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    private OrganisationalUnit(Name alias, Table<OrganisationalUnitRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganisationalUnit(Name alias, Table<OrganisationalUnitRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>organisational_unit</code> table reference
     */
    public OrganisationalUnit(String alias) {
        this(DSL.name(alias), ORGANISATIONAL_UNIT);
    }

    /**
     * Create an aliased <code>organisational_unit</code> table reference
     */
    public OrganisationalUnit(Name alias) {
        this(alias, ORGANISATIONAL_UNIT);
    }

    /**
     * Create a <code>organisational_unit</code> table reference
     */
    public OrganisationalUnit() {
        this(DSL.name("organisational_unit"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public OrganisationalUnit as(String alias) {
        return new OrganisationalUnit(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public OrganisationalUnit as(Name alias) {
        return new OrganisationalUnit(alias, this);
    }

    @Override
    @Nonnull
    public OrganisationalUnit as(Table<?> alias) {
        return new OrganisationalUnit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit rename(String name) {
        return new OrganisationalUnit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit rename(Name name) {
        return new OrganisationalUnit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit rename(Table<?> name) {
        return new OrganisationalUnit(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit where(Condition condition) {
        return new OrganisationalUnit(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public OrganisationalUnit where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public OrganisationalUnit where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public OrganisationalUnit where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public OrganisationalUnit where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public OrganisationalUnit whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
