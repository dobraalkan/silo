/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.UserRole;
import com.silo.backend.database.tables.interfaces.IUserRole;

import jakarta.annotation.Nonnull;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_role"
)
public class UserRoleRecord extends TableRecordImpl<UserRoleRecord> implements IUserRole {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user_role.user_name</code>.
     */
    public UserRoleRecord setUserName(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>user_role.user_name</code>.
     */
    @Column(name = "user_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getUserName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>user_role.role</code>.
     */
    public UserRoleRecord setRole(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>user_role.role</code>.
     */
    @Column(name = "role", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getRole() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IUserRole from) {
        setUserName(from.getUserName());
        setRole(from.getRole());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRoleRecord
     */
    public UserRoleRecord() {
        super(UserRole.USER_ROLE);
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    @ConstructorProperties({ "userName", "role" })
    public UserRoleRecord(@Nonnull String userName, @Nonnull String role) {
        super(UserRole.USER_ROLE);

        setUserName(userName);
        setRole(role);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    public UserRoleRecord(com.silo.backend.database.tables.pojos.UserRole value) {
        super(UserRole.USER_ROLE);

        if (value != null) {
            setUserName(value.userName());
            setRole(value.role());
            resetChangedOnNotNull();
        }
    }
}
