/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.Involvement;
import com.silo.backend.database.tables.interfaces.IInvolvement;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * defines a specific instance of an involvement kind between a person and an
 * entity (e.g. 'User X' is 'IT Owner' for 'APPLICATION/32')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "involvement"
)
public class InvolvementRecord extends TableRecordImpl<InvolvementRecord> implements IInvolvement {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>involvement.entity_kind</code>. the kind of entity the
     * person is involved with
     */
    public InvolvementRecord setEntityKind(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>involvement.entity_kind</code>. the kind of entity the
     * person is involved with
     */
    @Column(name = "entity_kind", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getEntityKind() {
        return (String) get(0);
    }

    /**
     * Setter for <code>involvement.entity_id</code>. the identifier of the
     * entity the person is involved with
     */
    public InvolvementRecord setEntityId(@Nonnull Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>involvement.entity_id</code>. the identifier of the
     * entity the person is involved with
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getEntityId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>involvement.employee_id</code>. reference to the person
     * involved with the entity
     */
    public InvolvementRecord setEmployeeId(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>involvement.employee_id</code>. reference to the person
     * involved with the entity
     */
    @Column(name = "employee_id", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getEmployeeId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>involvement.provenance</code>. where did this
     * involvement record originate, will be 'waltz' if provided via the UI
     */
    public InvolvementRecord setProvenance(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>involvement.provenance</code>. where did this
     * involvement record originate, will be 'waltz' if provided via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(3);
    }

    /**
     * Setter for <code>involvement.kind_id</code>. the type of involvement
     * between the person and the entity (e.g. 'IT Owner')
     */
    public InvolvementRecord setKindId(@Nonnull Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>involvement.kind_id</code>. the type of involvement
     * between the person and the entity (e.g. 'IT Owner')
     */
    @Column(name = "kind_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getKindId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>involvement.is_readonly</code>. can this involvement be
     * edited/removed by users (e.g. set to true if externally mastered)
     */
    public InvolvementRecord setIsReadonly(@Nullable Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>involvement.is_readonly</code>. can this involvement be
     * edited/removed by users (e.g. set to true if externally mastered)
     */
    @Column(name = "is_readonly")
    @Nullable
    @Override
    public Boolean getIsReadonly() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IInvolvement from) {
        setEntityKind(from.getEntityKind());
        setEntityId(from.getEntityId());
        setEmployeeId(from.getEmployeeId());
        setProvenance(from.getProvenance());
        setKindId(from.getKindId());
        setIsReadonly(from.getIsReadonly());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InvolvementRecord
     */
    public InvolvementRecord() {
        super(Involvement.INVOLVEMENT);
    }

    /**
     * Create a detached, initialised InvolvementRecord
     */
    @ConstructorProperties({ "entityKind", "entityId", "employeeId", "provenance", "kindId", "isReadonly" })
    public InvolvementRecord(@Nonnull String entityKind, @Nonnull Long entityId, @Nonnull String employeeId, @Nullable String provenance, @Nonnull Long kindId, @Nullable Boolean isReadonly) {
        super(Involvement.INVOLVEMENT);

        setEntityKind(entityKind);
        setEntityId(entityId);
        setEmployeeId(employeeId);
        setProvenance(provenance);
        setKindId(kindId);
        setIsReadonly(isReadonly);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InvolvementRecord
     */
    public InvolvementRecord(com.silo.backend.database.tables.pojos.Involvement value) {
        super(Involvement.INVOLVEMENT);

        if (value != null) {
            setEntityKind(value.entityKind());
            setEntityId(value.entityId());
            setEmployeeId(value.employeeId());
            setProvenance(value.provenance());
            setKindId(value.kindId());
            setIsReadonly(value.isReadonly());
            resetChangedOnNotNull();
        }
    }
}
