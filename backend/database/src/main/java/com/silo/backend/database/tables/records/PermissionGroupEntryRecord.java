/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.PermissionGroupEntry;
import com.silo.backend.database.tables.interfaces.IPermissionGroupEntry;

import jakarta.annotation.Nonnull;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * entities which have specific permissions which replace the default permission
 * group
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "permission_group_entry"
)
public class PermissionGroupEntryRecord extends TableRecordImpl<PermissionGroupEntryRecord> implements IPermissionGroupEntry {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>permission_group_entry.entity_id</code>. the id of the
     * entity being given specific permissions
     */
    public PermissionGroupEntryRecord setEntityId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_entry.entity_id</code>. the id of the
     * entity being given specific permissions
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getEntityId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>permission_group_entry.permission_group_id</code>.
     * identifier of the permission group being linked to
     */
    public PermissionGroupEntryRecord setPermissionGroupId(@Nonnull Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_entry.permission_group_id</code>.
     * identifier of the permission group being linked to
     */
    @Column(name = "permission_group_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getPermissionGroupId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>permission_group_entry.entity_kind</code>. the type of
     * the entity being given specific permissions
     */
    public PermissionGroupEntryRecord setEntityKind(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>permission_group_entry.entity_kind</code>. the type of
     * the entity being given specific permissions
     */
    @Column(name = "entity_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getEntityKind() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IPermissionGroupEntry from) {
        setEntityId(from.getEntityId());
        setPermissionGroupId(from.getPermissionGroupId());
        setEntityKind(from.getEntityKind());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissionGroupEntryRecord
     */
    public PermissionGroupEntryRecord() {
        super(PermissionGroupEntry.PERMISSION_GROUP_ENTRY);
    }

    /**
     * Create a detached, initialised PermissionGroupEntryRecord
     */
    @ConstructorProperties({ "entityId", "permissionGroupId", "entityKind" })
    public PermissionGroupEntryRecord(@Nonnull Long entityId, @Nonnull Long permissionGroupId, @Nonnull String entityKind) {
        super(PermissionGroupEntry.PERMISSION_GROUP_ENTRY);

        setEntityId(entityId);
        setPermissionGroupId(permissionGroupId);
        setEntityKind(entityKind);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PermissionGroupEntryRecord
     */
    public PermissionGroupEntryRecord(com.silo.backend.database.tables.pojos.PermissionGroupEntry value) {
        super(PermissionGroupEntry.PERMISSION_GROUP_ENTRY);

        if (value != null) {
            setEntityId(value.entityId());
            setPermissionGroupId(value.permissionGroupId());
            setEntityKind(value.entityKind());
            resetChangedOnNotNull();
        }
    }
}
