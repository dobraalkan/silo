/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ApplicationRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * represents an application (with an entity_kind of 'APPLICATION')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Application extends TableImpl<ApplicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>application</code>
     */
    public static final Application APPLICATION = new Application();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ApplicationRecord> getRecordType() {
        return ApplicationRecord.class;
    }

    /**
     * The column <code>application.id</code>.
     */
    public final TableField<ApplicationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>application.name</code>. name of this application
     * (aliases can be added in the entity_alias table)
     */
    public final TableField<ApplicationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "name of this application (aliases can be added in the entity_alias table)");

    /**
     * The column <code>application.description</code>. longer description to
     * provide more information about this application.  Markdown is supported
     */
    public final TableField<ApplicationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "longer description to provide more information about this application.  Markdown is supported");

    /**
     * The column <code>application.asset_code</code>. external identifier
     * representing this application
     */
    public final TableField<ApplicationRecord, String> ASSET_CODE = createField(DSL.name("asset_code"), SQLDataType.VARCHAR(255), this, "external identifier representing this application");

    /**
     * The column <code>application.created_at</code>.
     */
    public final TableField<ApplicationRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>application.updated_at</code>.
     */
    public final TableField<ApplicationRecord, Timestamp> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    /**
     * The column <code>application.organisational_unit_id</code>. reference to
     * the owning org unit
     */
    public final TableField<ApplicationRecord, Long> ORGANISATIONAL_UNIT_ID = createField(DSL.name("organisational_unit_id"), SQLDataType.BIGINT.nullable(false), this, "reference to the owning org unit");

    /**
     * The column <code>application.kind</code>. broad category of this
     * application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)
     */
    public final TableField<ApplicationRecord, String> KIND = createField(DSL.name("kind"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'IN_HOUSE'"), SQLDataType.VARCHAR)), this, "broad category of this application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)");

    /**
     * The column <code>application.lifecycle_phase</code>. the current
     * application lifecycle state of this application (one of: CONCEPTUAL,
     * DEVELOPMENT, PRODUCTION, RETIRED)
     */
    public final TableField<ApplicationRecord, String> LIFECYCLE_PHASE = createField(DSL.name("lifecycle_phase"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'PRODUCTION'"), SQLDataType.VARCHAR)), this, "the current application lifecycle state of this application (one of: CONCEPTUAL, DEVELOPMENT, PRODUCTION, RETIRED)");

    /**
     * The column <code>application.parent_asset_code</code>. asset code of any
     * parent application
     */
    public final TableField<ApplicationRecord, String> PARENT_ASSET_CODE = createField(DSL.name("parent_asset_code"), SQLDataType.VARCHAR(255), this, "asset code of any parent application");

    /**
     * The column <code>application.overall_rating</code>. investment rating
     * scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain,
     * Invest, Unknown)
     */
    public final TableField<ApplicationRecord, String> OVERALL_RATING = createField(DSL.name("overall_rating"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'Z'"), SQLDataType.CHAR)), this, "investment rating scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain, Invest, Unknown)");

    /**
     * The column <code>application.provenance</code>. origination of this
     * application record.  Will be 'waltz' if entered via the UI
     */
    public final TableField<ApplicationRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "origination of this application record.  Will be 'waltz' if entered via the UI");

    /**
     * The column <code>application.business_criticality</code>. business
     * criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH,
     * NONE, UNKNOWN)
     */
    public final TableField<ApplicationRecord, String> BUSINESS_CRITICALITY = createField(DSL.name("business_criticality"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "business criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH, NONE, UNKNOWN)");

    /**
     * The column <code>application.is_removed</code>. should this record
     * logically be treated as if it has been physically deleted
     */
    public final TableField<ApplicationRecord, Boolean> IS_REMOVED = createField(DSL.name("is_removed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "should this record logically be treated as if it has been physically deleted");

    /**
     * The column <code>application.entity_lifecycle_status</code>. the
     * lifecycle state of this entity record, slightly different from is_removed
     * as does not imply the record is 'gone'  (one of: ACTIVE, PENDING,
     * REMOVED)
     */
    public final TableField<ApplicationRecord, String> ENTITY_LIFECYCLE_STATUS = createField(DSL.name("entity_lifecycle_status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'"), SQLDataType.VARCHAR)), this, "the lifecycle state of this entity record, slightly different from is_removed as does not imply the record is 'gone'  (one of: ACTIVE, PENDING, REMOVED)");

    /**
     * The column <code>application.planned_retirement_date</code>. date when
     * this application is (or was) planning to retire
     */
    public final TableField<ApplicationRecord, Timestamp> PLANNED_RETIREMENT_DATE = createField(DSL.name("planned_retirement_date"), SQLDataType.TIMESTAMP(6), this, "date when this application is (or was) planning to retire");

    /**
     * The column <code>application.actual_retirement_date</code>. date when
     * this application actually retired from production, null if not planned
     */
    public final TableField<ApplicationRecord, Timestamp> ACTUAL_RETIREMENT_DATE = createField(DSL.name("actual_retirement_date"), SQLDataType.TIMESTAMP(6), this, "date when this application actually retired from production, null if not planned");

    /**
     * The column <code>application.commission_date</code>. when was this
     * application commissioned, null if unknown
     */
    public final TableField<ApplicationRecord, Timestamp> COMMISSION_DATE = createField(DSL.name("commission_date"), SQLDataType.TIMESTAMP(6), this, "when was this application commissioned, null if unknown");

    private Application(Name alias, Table<ApplicationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("represents an application (with an entity_kind of 'APPLICATION')"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>application</code> table reference
     */
    public Application(String alias) {
        this(DSL.name(alias), APPLICATION);
    }

    /**
     * Create an aliased <code>application</code> table reference
     */
    public Application(Name alias) {
        this(alias, APPLICATION);
    }

    /**
     * Create a <code>application</code> table reference
     */
    public Application() {
        this(DSL.name("application"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<ApplicationRecord, Long> getIdentity() {
        return (Identity<ApplicationRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public Application as(String alias) {
        return new Application(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Application as(Name alias) {
        return new Application(alias, this);
    }

    @Override
    @Nonnull
    public Application as(Table<?> alias) {
        return new Application(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Application rename(String name) {
        return new Application(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Application rename(Name name) {
        return new Application(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Application rename(Table<?> name) {
        return new Application(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application where(Condition condition) {
        return new Application(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Application where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Application where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Application where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Application where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Application whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
