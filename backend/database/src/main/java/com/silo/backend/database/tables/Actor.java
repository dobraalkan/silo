/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ActorRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * represents a non application entity, typically used in flows.  Examples
 * include exchanges, departments, counterpart organisations
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Actor extends TableImpl<ActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>actor</code>
     */
    public static final Actor ACTOR = new Actor();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ActorRecord> getRecordType() {
        return ActorRecord.class;
    }

    /**
     * The column <code>actor.id</code>.
     */
    public final TableField<ActorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>actor.name</code>. short name identifying the actor
     * (i.e. Bank of England)
     */
    public final TableField<ActorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "short name identifying the actor (i.e. Bank of England)");

    /**
     * The column <code>actor.description</code>. longer textual description of
     * the actor
     */
    public final TableField<ActorRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000).nullable(false), this, "longer textual description of the actor");

    /**
     * The column <code>actor.last_updated_at</code>.
     */
    public final TableField<ActorRecord, Timestamp> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMP(6).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>actor.last_updated_by</code>.
     */
    public final TableField<ActorRecord, String> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>actor.is_external</code>. flag to indicate whether this
     * is an internal actor (e.g. Chief Risk Officer) or external actor (e.g.
     * Bank of England)
     */
    public final TableField<ActorRecord, Boolean> IS_EXTERNAL = createField(DSL.name("is_external"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "flag to indicate whether this is an internal actor (e.g. Chief Risk Officer) or external actor (e.g. Bank of England)");

    /**
     * The column <code>actor.provenance</code>. where did this actor record
     * originate, will be 'waltz' if provided via the UI
     */
    public final TableField<ActorRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "where did this actor record originate, will be 'waltz' if provided via the UI");

    /**
     * The column <code>actor.external_id</code>. identifier this actor is known
     * by externally.  Should not change, unlike the name which may change.
     */
    public final TableField<ActorRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200), this, "identifier this actor is known by externally.  Should not change, unlike the name which may change.");

    private Actor(Name alias, Table<ActorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Actor(Name alias, Table<ActorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("represents a non application entity, typically used in flows.  Examples include exchanges, departments, counterpart organisations"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>actor</code> table reference
     */
    public Actor(String alias) {
        this(DSL.name(alias), ACTOR);
    }

    /**
     * Create an aliased <code>actor</code> table reference
     */
    public Actor(Name alias) {
        this(alias, ACTOR);
    }

    /**
     * Create a <code>actor</code> table reference
     */
    public Actor() {
        this(DSL.name("actor"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<ActorRecord, Long> getIdentity() {
        return (Identity<ActorRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public Actor as(String alias) {
        return new Actor(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Actor as(Name alias) {
        return new Actor(alias, this);
    }

    @Override
    @Nonnull
    public Actor as(Table<?> alias) {
        return new Actor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Actor rename(String name) {
        return new Actor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Actor rename(Name name) {
        return new Actor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Actor rename(Table<?> name) {
        return new Actor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor where(Condition condition) {
        return new Actor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Actor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Actor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Actor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Actor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Actor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
