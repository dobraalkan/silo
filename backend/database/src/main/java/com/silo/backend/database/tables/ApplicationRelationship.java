/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ApplicationRelationshipRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicationRelationship extends TableImpl<ApplicationRelationshipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>application_relationship</code>
     */
    public static final ApplicationRelationship APPLICATION_RELATIONSHIP = new ApplicationRelationship();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ApplicationRelationshipRecord> getRecordType() {
        return ApplicationRelationshipRecord.class;
    }

    /**
     * The column <code>application_relationship.id</code>.
     */
    public final TableField<ApplicationRelationshipRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>application_relationship.relation_kind</code>.
     */
    public final TableField<ApplicationRelationshipRecord, Long> RELATION_KIND = createField(DSL.name("relation_kind"), SQLDataType.BIGINT, this, "");

    private ApplicationRelationship(Name alias, Table<ApplicationRelationshipRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApplicationRelationship(Name alias, Table<ApplicationRelationshipRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>application_relationship</code> table reference
     */
    public ApplicationRelationship(String alias) {
        this(DSL.name(alias), APPLICATION_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>application_relationship</code> table reference
     */
    public ApplicationRelationship(Name alias) {
        this(alias, APPLICATION_RELATIONSHIP);
    }

    /**
     * Create a <code>application_relationship</code> table reference
     */
    public ApplicationRelationship() {
        this(DSL.name("application_relationship"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public ApplicationRelationship as(String alias) {
        return new ApplicationRelationship(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ApplicationRelationship as(Name alias) {
        return new ApplicationRelationship(alias, this);
    }

    @Override
    @Nonnull
    public ApplicationRelationship as(Table<?> alias) {
        return new ApplicationRelationship(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship rename(String name) {
        return new ApplicationRelationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship rename(Name name) {
        return new ApplicationRelationship(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship rename(Table<?> name) {
        return new ApplicationRelationship(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship where(Condition condition) {
        return new ApplicationRelationship(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationRelationship where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationRelationship where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationRelationship where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationRelationship where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationRelationship whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
