/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IInvolvementGroup;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * collection of involvement kinds
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "involvement_group"
)
public record InvolvementGroup(
    @Nullable Long id,
    @Nonnull String name,
    @Nonnull String externalId,
    @Nonnull String provenance
) implements IInvolvementGroup {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>involvement_group.id</code>. unique identifier for this
     * involvement group within waltz
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>involvement_group.name</code>. name of this involvement
     * group
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>involvement_group.external_id</code>. external
     * identifier for this involvement group
     */
    @Column(name = "external_id", nullable = false, length = 200)
    @NotNull
    @Size(max = 200)
    @Nonnull
    @Override
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Getter for <code>involvement_group.provenance</code>. origination of this
     * involvement group
     */
    @Column(name = "provenance", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InvolvementGroup other = (InvolvementGroup) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InvolvementGroup (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(externalId);
        sb.append(", ").append(provenance);

        sb.append(")");
        return sb.toString();
    }
}
