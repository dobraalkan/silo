/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.UserPreference;
import com.silo.backend.database.tables.interfaces.IUserPreference;

import jakarta.annotation.Nonnull;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_preference"
)
public class UserPreferenceRecord extends TableRecordImpl<UserPreferenceRecord> implements IUserPreference {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user_preference.key</code>.
     */
    public UserPreferenceRecord setKey(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>user_preference.key</code>.
     */
    @Column(name = "key", nullable = false, length = 120)
    @NotNull
    @Size(max = 120)
    @Nonnull
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>user_preference.value</code>.
     */
    public UserPreferenceRecord setValue(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>user_preference.value</code>.
     */
    @Column(name = "value", nullable = false, length = 2048)
    @NotNull
    @Size(max = 2048)
    @Nonnull
    @Override
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>user_preference.user_name</code>.
     */
    public UserPreferenceRecord setUserName(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>user_preference.user_name</code>.
     */
    @Column(name = "user_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getUserName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IUserPreference from) {
        setKey(from.getKey());
        setValue(from.getValue());
        setUserName(from.getUserName());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserPreferenceRecord
     */
    public UserPreferenceRecord() {
        super(UserPreference.USER_PREFERENCE);
    }

    /**
     * Create a detached, initialised UserPreferenceRecord
     */
    @ConstructorProperties({ "key", "value", "userName" })
    public UserPreferenceRecord(@Nonnull String key, @Nonnull String value, @Nonnull String userName) {
        super(UserPreference.USER_PREFERENCE);

        setKey(key);
        setValue(value);
        setUserName(userName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserPreferenceRecord
     */
    public UserPreferenceRecord(com.silo.backend.database.tables.pojos.UserPreference value) {
        super(UserPreference.USER_PREFERENCE);

        if (value != null) {
            setKey(value.key());
            setValue(value.value());
            setUserName(value.userName());
            resetChangedOnNotNull();
        }
    }
}
