/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.AccessLogRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * logs user page and section views
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccessLog extends TableImpl<AccessLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>access_log</code>
     */
    public static final AccessLog ACCESS_LOG = new AccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AccessLogRecord> getRecordType() {
        return AccessLogRecord.class;
    }

    /**
     * The column <code>access_log.id</code>.
     */
    public final TableField<AccessLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>access_log.user_id</code>. identifier of the user
     * accessing the page or section
     */
    public final TableField<AccessLogRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "identifier of the user accessing the page or section");

    /**
     * The column <code>access_log.state</code>. identifier of the page  plus
     * optionally a section identifier (format: state|section)
     */
    public final TableField<AccessLogRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(255).nullable(false), this, "identifier of the page  plus optionally a section identifier (format: state|section)");

    /**
     * The column <code>access_log.params</code>. additional params provided to
     * page/section
     */
    public final TableField<AccessLogRecord, String> PARAMS = createField(DSL.name("params"), SQLDataType.VARCHAR(1024), this, "additional params provided to page/section");

    /**
     * The column <code>access_log.created_at</code>.
     */
    public final TableField<AccessLogRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    private AccessLog(Name alias, Table<AccessLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccessLog(Name alias, Table<AccessLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("logs user page and section views"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>access_log</code> table reference
     */
    public AccessLog(String alias) {
        this(DSL.name(alias), ACCESS_LOG);
    }

    /**
     * Create an aliased <code>access_log</code> table reference
     */
    public AccessLog(Name alias) {
        this(alias, ACCESS_LOG);
    }

    /**
     * Create a <code>access_log</code> table reference
     */
    public AccessLog() {
        this(DSL.name("access_log"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<AccessLogRecord, Integer> getIdentity() {
        return (Identity<AccessLogRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public AccessLog as(String alias) {
        return new AccessLog(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AccessLog as(Name alias) {
        return new AccessLog(alias, this);
    }

    @Override
    @Nonnull
    public AccessLog as(Table<?> alias) {
        return new AccessLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AccessLog rename(String name) {
        return new AccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AccessLog rename(Name name) {
        return new AccessLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AccessLog rename(Table<?> name) {
        return new AccessLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog where(Condition condition) {
        return new AccessLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AccessLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AccessLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AccessLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AccessLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AccessLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
