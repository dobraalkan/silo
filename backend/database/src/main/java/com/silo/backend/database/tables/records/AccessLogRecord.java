/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.AccessLog;
import com.silo.backend.database.tables.interfaces.IAccessLog;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * logs user page and section views
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "access_log"
)
public class AccessLogRecord extends TableRecordImpl<AccessLogRecord> implements IAccessLog {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>access_log.id</code>.
     */
    public AccessLogRecord setId(@Nullable Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>access_log.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>access_log.user_id</code>. identifier of the user
     * accessing the page or section
     */
    public AccessLogRecord setUserId(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>access_log.user_id</code>. identifier of the user
     * accessing the page or section
     */
    @Column(name = "user_id", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getUserId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>access_log.state</code>. identifier of the page  plus
     * optionally a section identifier (format: state|section)
     */
    public AccessLogRecord setState(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>access_log.state</code>. identifier of the page  plus
     * optionally a section identifier (format: state|section)
     */
    @Column(name = "state", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getState() {
        return (String) get(2);
    }

    /**
     * Setter for <code>access_log.params</code>. additional params provided to
     * page/section
     */
    public AccessLogRecord setParams(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>access_log.params</code>. additional params provided to
     * page/section
     */
    @Column(name = "params", length = 1024)
    @Size(max = 1024)
    @Nullable
    @Override
    public String getParams() {
        return (String) get(3);
    }

    /**
     * Setter for <code>access_log.created_at</code>.
     */
    public AccessLogRecord setCreatedAt(@Nullable Timestamp value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>access_log.created_at</code>.
     */
    @Column(name = "created_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getCreatedAt() {
        return (Timestamp) get(4);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IAccessLog from) {
        setId(from.getId());
        setUserId(from.getUserId());
        setState(from.getState());
        setParams(from.getParams());
        setCreatedAt(from.getCreatedAt());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccessLogRecord
     */
    public AccessLogRecord() {
        super(AccessLog.ACCESS_LOG);
    }

    /**
     * Create a detached, initialised AccessLogRecord
     */
    @ConstructorProperties({ "id", "userId", "state", "params", "createdAt" })
    public AccessLogRecord(@Nullable Integer id, @Nonnull String userId, @Nonnull String state, @Nullable String params, @Nullable Timestamp createdAt) {
        super(AccessLog.ACCESS_LOG);

        setId(id);
        setUserId(userId);
        setState(state);
        setParams(params);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccessLogRecord
     */
    public AccessLogRecord(com.silo.backend.database.tables.pojos.AccessLog value) {
        super(AccessLog.ACCESS_LOG);

        if (value != null) {
            setId(value.id());
            setUserId(value.userId());
            setState(value.state());
            setParams(value.params());
            setCreatedAt(value.createdAt());
            resetChangedOnNotNull();
        }
    }
}
