/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.interfaces;


import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * represents a non application entity, typically used in flows.  Examples
 * include exchanges, departments, counterpart organisations
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "actor"
)
public interface IActor extends Serializable {

    /**
     * Getter for <code>actor.id</code>.
     */
    @Column(name = "id")
    @Nullable
    public Long getId();

    /**
     * Getter for <code>actor.name</code>. short name identifying the actor
     * (i.e. Bank of England)
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    public String getName();

    /**
     * Getter for <code>actor.description</code>. longer textual description of
     * the actor
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    public String getDescription();

    /**
     * Getter for <code>actor.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    public Timestamp getLastUpdatedAt();

    /**
     * Getter for <code>actor.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    public String getLastUpdatedBy();

    /**
     * Getter for <code>actor.is_external</code>. flag to indicate whether this
     * is an internal actor (e.g. Chief Risk Officer) or external actor (e.g.
     * Bank of England)
     */
    @Column(name = "is_external")
    @Nullable
    public Boolean getIsExternal();

    /**
     * Getter for <code>actor.provenance</code>. where did this actor record
     * originate, will be 'waltz' if provided via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    public String getProvenance();

    /**
     * Getter for <code>actor.external_id</code>. identifier this actor is known
     * by externally.  Should not change, unlike the name which may change.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    public String getExternalId();
}
