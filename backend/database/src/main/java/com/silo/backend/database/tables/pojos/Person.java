/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IPerson;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "person"
)
public record Person(
    @Nullable Long id,
    @Nullable String employeeId,
    @Nonnull String displayName,
    @Nonnull String email,
    @Nullable String userPrincipalName,
    @Nullable String departmentName,
    @Nonnull String kind,
    @Nullable String managerEmployeeId,
    @Nullable String title,
    @Nullable String officePhone,
    @Nullable String mobilePhone,
    @Nullable Long organisationalUnitId,
    @Nullable Boolean isRemoved
) implements IPerson {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>person.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>person.employee_id</code>.
     */
    @Column(name = "employee_id", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Getter for <code>person.display_name</code>.
     */
    @Column(name = "display_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Getter for <code>person.email</code>.
     */
    @Column(name = "email", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getEmail() {
        return this.email;
    }

    /**
     * Getter for <code>person.user_principal_name</code>.
     */
    @Column(name = "user_principal_name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getUserPrincipalName() {
        return this.userPrincipalName;
    }

    /**
     * Getter for <code>person.department_name</code>.
     */
    @Column(name = "department_name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getDepartmentName() {
        return this.departmentName;
    }

    /**
     * Getter for <code>person.kind</code>.
     */
    @Column(name = "kind", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getKind() {
        return this.kind;
    }

    /**
     * Getter for <code>person.manager_employee_id</code>.
     */
    @Column(name = "manager_employee_id", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getManagerEmployeeId() {
        return this.managerEmployeeId;
    }

    /**
     * Getter for <code>person.title</code>.
     */
    @Column(name = "title", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getTitle() {
        return this.title;
    }

    /**
     * Getter for <code>person.office_phone</code>.
     */
    @Column(name = "office_phone", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getOfficePhone() {
        return this.officePhone;
    }

    /**
     * Getter for <code>person.mobile_phone</code>.
     */
    @Column(name = "mobile_phone", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getMobilePhone() {
        return this.mobilePhone;
    }

    /**
     * Getter for <code>person.organisational_unit_id</code>.
     */
    @Column(name = "organisational_unit_id")
    @Nullable
    @Override
    public Long getOrganisationalUnitId() {
        return this.organisationalUnitId;
    }

    /**
     * Getter for <code>person.is_removed</code>.
     */
    @Column(name = "is_removed")
    @Nullable
    @Override
    public Boolean getIsRemoved() {
        return this.isRemoved;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Person other = (Person) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.employeeId == null) {
            if (other.employeeId != null)
                return false;
        }
        else if (!this.employeeId.equals(other.employeeId))
            return false;
        if (this.displayName == null) {
            if (other.displayName != null)
                return false;
        }
        else if (!this.displayName.equals(other.displayName))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.userPrincipalName == null) {
            if (other.userPrincipalName != null)
                return false;
        }
        else if (!this.userPrincipalName.equals(other.userPrincipalName))
            return false;
        if (this.departmentName == null) {
            if (other.departmentName != null)
                return false;
        }
        else if (!this.departmentName.equals(other.departmentName))
            return false;
        if (this.kind == null) {
            if (other.kind != null)
                return false;
        }
        else if (!this.kind.equals(other.kind))
            return false;
        if (this.managerEmployeeId == null) {
            if (other.managerEmployeeId != null)
                return false;
        }
        else if (!this.managerEmployeeId.equals(other.managerEmployeeId))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.officePhone == null) {
            if (other.officePhone != null)
                return false;
        }
        else if (!this.officePhone.equals(other.officePhone))
            return false;
        if (this.mobilePhone == null) {
            if (other.mobilePhone != null)
                return false;
        }
        else if (!this.mobilePhone.equals(other.mobilePhone))
            return false;
        if (this.organisationalUnitId == null) {
            if (other.organisationalUnitId != null)
                return false;
        }
        else if (!this.organisationalUnitId.equals(other.organisationalUnitId))
            return false;
        if (this.isRemoved == null) {
            if (other.isRemoved != null)
                return false;
        }
        else if (!this.isRemoved.equals(other.isRemoved))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.employeeId == null) ? 0 : this.employeeId.hashCode());
        result = prime * result + ((this.displayName == null) ? 0 : this.displayName.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.userPrincipalName == null) ? 0 : this.userPrincipalName.hashCode());
        result = prime * result + ((this.departmentName == null) ? 0 : this.departmentName.hashCode());
        result = prime * result + ((this.kind == null) ? 0 : this.kind.hashCode());
        result = prime * result + ((this.managerEmployeeId == null) ? 0 : this.managerEmployeeId.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.officePhone == null) ? 0 : this.officePhone.hashCode());
        result = prime * result + ((this.mobilePhone == null) ? 0 : this.mobilePhone.hashCode());
        result = prime * result + ((this.organisationalUnitId == null) ? 0 : this.organisationalUnitId.hashCode());
        result = prime * result + ((this.isRemoved == null) ? 0 : this.isRemoved.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Person (");

        sb.append(id);
        sb.append(", ").append(employeeId);
        sb.append(", ").append(displayName);
        sb.append(", ").append(email);
        sb.append(", ").append(userPrincipalName);
        sb.append(", ").append(departmentName);
        sb.append(", ").append(kind);
        sb.append(", ").append(managerEmployeeId);
        sb.append(", ").append(title);
        sb.append(", ").append(officePhone);
        sb.append(", ").append(mobilePhone);
        sb.append(", ").append(organisationalUnitId);
        sb.append(", ").append(isRemoved);

        sb.append(")");
        return sb.toString();
    }
}
