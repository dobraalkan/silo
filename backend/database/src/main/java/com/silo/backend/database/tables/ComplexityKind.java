/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ComplexityKindRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * complexity can be used to give a decimal score for an entity in waltz against
 * a complexity kind (e.g. Flow Complexity). The complexity kind describes the
 * type of complexity being evaluated.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ComplexityKind extends TableImpl<ComplexityKindRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>complexity_kind</code>
     */
    public static final ComplexityKind COMPLEXITY_KIND = new ComplexityKind();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ComplexityKindRecord> getRecordType() {
        return ComplexityKindRecord.class;
    }

    /**
     * The column <code>complexity_kind.id</code>. unique identifier for this
     * complexity kind record within waltz
     */
    public final TableField<ComplexityKindRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "unique identifier for this complexity kind record within waltz");

    /**
     * The column <code>complexity_kind.name</code>. the name of this complexity
     * kind
     */
    public final TableField<ComplexityKindRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "the name of this complexity kind");

    /**
     * The column <code>complexity_kind.description</code>. longer description
     * to provide more information about this complexity kind
     */
    public final TableField<ComplexityKindRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "longer description to provide more information about this complexity kind");

    /**
     * The column <code>complexity_kind.external_id</code>. external identifier
     * for this complexity kind
     */
    public final TableField<ComplexityKindRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200), this, "external identifier for this complexity kind");

    /**
     * The column <code>complexity_kind.is_default</code>. indicates the
     * complexity kind to be shown on the entity overview by default
     */
    public final TableField<ComplexityKindRecord, Boolean> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "indicates the complexity kind to be shown on the entity overview by default");

    private ComplexityKind(Name alias, Table<ComplexityKindRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ComplexityKind(Name alias, Table<ComplexityKindRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("complexity can be used to give a decimal score for an entity in waltz against a complexity kind (e.g. Flow Complexity). The complexity kind describes the type of complexity being evaluated."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>complexity_kind</code> table reference
     */
    public ComplexityKind(String alias) {
        this(DSL.name(alias), COMPLEXITY_KIND);
    }

    /**
     * Create an aliased <code>complexity_kind</code> table reference
     */
    public ComplexityKind(Name alias) {
        this(alias, COMPLEXITY_KIND);
    }

    /**
     * Create a <code>complexity_kind</code> table reference
     */
    public ComplexityKind() {
        this(DSL.name("complexity_kind"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<ComplexityKindRecord, Long> getIdentity() {
        return (Identity<ComplexityKindRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public ComplexityKind as(String alias) {
        return new ComplexityKind(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ComplexityKind as(Name alias) {
        return new ComplexityKind(alias, this);
    }

    @Override
    @Nonnull
    public ComplexityKind as(Table<?> alias) {
        return new ComplexityKind(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ComplexityKind rename(String name) {
        return new ComplexityKind(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ComplexityKind rename(Name name) {
        return new ComplexityKind(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ComplexityKind rename(Table<?> name) {
        return new ComplexityKind(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind where(Condition condition) {
        return new ComplexityKind(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ComplexityKind where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ComplexityKind where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ComplexityKind where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ComplexityKind where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ComplexityKind whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
