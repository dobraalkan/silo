/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IApplication;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * represents an application (with an entity_kind of 'APPLICATION')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "application"
)
public record Application(
    @Nullable Long id,
    @Nullable String name,
    @Nullable String description,
    @Nullable String assetCode,
    @Nullable Timestamp createdAt,
    @Nonnull Timestamp updatedAt,
    @Nonnull Long organisationalUnitId,
    @Nullable String kind,
    @Nullable String lifecyclePhase,
    @Nullable String parentAssetCode,
    @Nullable String overallRating,
    @Nullable String provenance,
    @Nullable String businessCriticality,
    @Nullable Boolean isRemoved,
    @Nullable String entityLifecycleStatus,
    @Nullable Timestamp plannedRetirementDate,
    @Nullable Timestamp actualRetirementDate,
    @Nullable Timestamp commissionDate
) implements IApplication {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>application.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>application.name</code>. name of this application
     * (aliases can be added in the entity_alias table)
     */
    @Column(name = "name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>application.description</code>. longer description to
     * provide more information about this application.  Markdown is supported
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>application.asset_code</code>. external identifier
     * representing this application
     */
    @Column(name = "asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getAssetCode() {
        return this.assetCode;
    }

    /**
     * Getter for <code>application.created_at</code>.
     */
    @Column(name = "created_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>application.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    @Override
    public Timestamp getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for <code>application.organisational_unit_id</code>. reference to
     * the owning org unit
     */
    @Column(name = "organisational_unit_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getOrganisationalUnitId() {
        return this.organisationalUnitId;
    }

    /**
     * Getter for <code>application.kind</code>. broad category of this
     * application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)
     */
    @Column(name = "kind", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getKind() {
        return this.kind;
    }

    /**
     * Getter for <code>application.lifecycle_phase</code>. the current
     * application lifecycle state of this application (one of: CONCEPTUAL,
     * DEVELOPMENT, PRODUCTION, RETIRED)
     */
    @Column(name = "lifecycle_phase", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getLifecyclePhase() {
        return this.lifecyclePhase;
    }

    /**
     * Getter for <code>application.parent_asset_code</code>. asset code of any
     * parent application
     */
    @Column(name = "parent_asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getParentAssetCode() {
        return this.parentAssetCode;
    }

    /**
     * Getter for <code>application.overall_rating</code>. investment rating
     * scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain,
     * Invest, Unknown)
     */
    @Column(name = "overall_rating", length = 1)
    @Size(max = 1)
    @Nullable
    @Override
    public String getOverallRating() {
        return this.overallRating;
    }

    /**
     * Getter for <code>application.provenance</code>. origination of this
     * application record.  Will be 'waltz' if entered via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    /**
     * Getter for <code>application.business_criticality</code>. business
     * criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH,
     * NONE, UNKNOWN)
     */
    @Column(name = "business_criticality", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getBusinessCriticality() {
        return this.businessCriticality;
    }

    /**
     * Getter for <code>application.is_removed</code>. should this record
     * logically be treated as if it has been physically deleted
     */
    @Column(name = "is_removed")
    @Nullable
    @Override
    public Boolean getIsRemoved() {
        return this.isRemoved;
    }

    /**
     * Getter for <code>application.entity_lifecycle_status</code>. the
     * lifecycle state of this entity record, slightly different from is_removed
     * as does not imply the record is 'gone'  (one of: ACTIVE, PENDING,
     * REMOVED)
     */
    @Column(name = "entity_lifecycle_status", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getEntityLifecycleStatus() {
        return this.entityLifecycleStatus;
    }

    /**
     * Getter for <code>application.planned_retirement_date</code>. date when
     * this application is (or was) planning to retire
     */
    @Column(name = "planned_retirement_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getPlannedRetirementDate() {
        return this.plannedRetirementDate;
    }

    /**
     * Getter for <code>application.actual_retirement_date</code>. date when
     * this application actually retired from production, null if not planned
     */
    @Column(name = "actual_retirement_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getActualRetirementDate() {
        return this.actualRetirementDate;
    }

    /**
     * Getter for <code>application.commission_date</code>. when was this
     * application commissioned, null if unknown
     */
    @Column(name = "commission_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getCommissionDate() {
        return this.commissionDate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Application other = (Application) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.assetCode == null) {
            if (other.assetCode != null)
                return false;
        }
        else if (!this.assetCode.equals(other.assetCode))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.organisationalUnitId == null) {
            if (other.organisationalUnitId != null)
                return false;
        }
        else if (!this.organisationalUnitId.equals(other.organisationalUnitId))
            return false;
        if (this.kind == null) {
            if (other.kind != null)
                return false;
        }
        else if (!this.kind.equals(other.kind))
            return false;
        if (this.lifecyclePhase == null) {
            if (other.lifecyclePhase != null)
                return false;
        }
        else if (!this.lifecyclePhase.equals(other.lifecyclePhase))
            return false;
        if (this.parentAssetCode == null) {
            if (other.parentAssetCode != null)
                return false;
        }
        else if (!this.parentAssetCode.equals(other.parentAssetCode))
            return false;
        if (this.overallRating == null) {
            if (other.overallRating != null)
                return false;
        }
        else if (!this.overallRating.equals(other.overallRating))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        if (this.businessCriticality == null) {
            if (other.businessCriticality != null)
                return false;
        }
        else if (!this.businessCriticality.equals(other.businessCriticality))
            return false;
        if (this.isRemoved == null) {
            if (other.isRemoved != null)
                return false;
        }
        else if (!this.isRemoved.equals(other.isRemoved))
            return false;
        if (this.entityLifecycleStatus == null) {
            if (other.entityLifecycleStatus != null)
                return false;
        }
        else if (!this.entityLifecycleStatus.equals(other.entityLifecycleStatus))
            return false;
        if (this.plannedRetirementDate == null) {
            if (other.plannedRetirementDate != null)
                return false;
        }
        else if (!this.plannedRetirementDate.equals(other.plannedRetirementDate))
            return false;
        if (this.actualRetirementDate == null) {
            if (other.actualRetirementDate != null)
                return false;
        }
        else if (!this.actualRetirementDate.equals(other.actualRetirementDate))
            return false;
        if (this.commissionDate == null) {
            if (other.commissionDate != null)
                return false;
        }
        else if (!this.commissionDate.equals(other.commissionDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.assetCode == null) ? 0 : this.assetCode.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.organisationalUnitId == null) ? 0 : this.organisationalUnitId.hashCode());
        result = prime * result + ((this.kind == null) ? 0 : this.kind.hashCode());
        result = prime * result + ((this.lifecyclePhase == null) ? 0 : this.lifecyclePhase.hashCode());
        result = prime * result + ((this.parentAssetCode == null) ? 0 : this.parentAssetCode.hashCode());
        result = prime * result + ((this.overallRating == null) ? 0 : this.overallRating.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        result = prime * result + ((this.businessCriticality == null) ? 0 : this.businessCriticality.hashCode());
        result = prime * result + ((this.isRemoved == null) ? 0 : this.isRemoved.hashCode());
        result = prime * result + ((this.entityLifecycleStatus == null) ? 0 : this.entityLifecycleStatus.hashCode());
        result = prime * result + ((this.plannedRetirementDate == null) ? 0 : this.plannedRetirementDate.hashCode());
        result = prime * result + ((this.actualRetirementDate == null) ? 0 : this.actualRetirementDate.hashCode());
        result = prime * result + ((this.commissionDate == null) ? 0 : this.commissionDate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Application (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(assetCode);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(organisationalUnitId);
        sb.append(", ").append(kind);
        sb.append(", ").append(lifecyclePhase);
        sb.append(", ").append(parentAssetCode);
        sb.append(", ").append(overallRating);
        sb.append(", ").append(provenance);
        sb.append(", ").append(businessCriticality);
        sb.append(", ").append(isRemoved);
        sb.append(", ").append(entityLifecycleStatus);
        sb.append(", ").append(plannedRetirementDate);
        sb.append(", ").append(actualRetirementDate);
        sb.append(", ").append(commissionDate);

        sb.append(")");
        return sb.toString();
    }
}
