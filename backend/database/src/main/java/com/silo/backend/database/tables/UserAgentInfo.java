/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.UserAgentInfoRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAgentInfo extends TableImpl<UserAgentInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_agent_info</code>
     */
    public static final UserAgentInfo USER_AGENT_INFO = new UserAgentInfo();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserAgentInfoRecord> getRecordType() {
        return UserAgentInfoRecord.class;
    }

    /**
     * The column <code>user_agent_info.id</code>.
     */
    public final TableField<UserAgentInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>user_agent_info.user_name</code>.
     */
    public final TableField<UserAgentInfoRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>user_agent_info.user_agent</code>.
     */
    public final TableField<UserAgentInfoRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>user_agent_info.resolution</code>.
     */
    public final TableField<UserAgentInfoRecord, String> RESOLUTION = createField(DSL.name("resolution"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>user_agent_info.operating_system</code>.
     */
    public final TableField<UserAgentInfoRecord, String> OPERATING_SYSTEM = createField(DSL.name("operating_system"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>user_agent_info.ip_address</code>.
     */
    public final TableField<UserAgentInfoRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>user_agent_info.login_timestamp</code>.
     */
    public final TableField<UserAgentInfoRecord, Timestamp> LOGIN_TIMESTAMP = createField(DSL.name("login_timestamp"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    private UserAgentInfo(Name alias, Table<UserAgentInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserAgentInfo(Name alias, Table<UserAgentInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>user_agent_info</code> table reference
     */
    public UserAgentInfo(String alias) {
        this(DSL.name(alias), USER_AGENT_INFO);
    }

    /**
     * Create an aliased <code>user_agent_info</code> table reference
     */
    public UserAgentInfo(Name alias) {
        this(alias, USER_AGENT_INFO);
    }

    /**
     * Create a <code>user_agent_info</code> table reference
     */
    public UserAgentInfo() {
        this(DSL.name("user_agent_info"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<UserAgentInfoRecord, Integer> getIdentity() {
        return (Identity<UserAgentInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UserAgentInfo as(String alias) {
        return new UserAgentInfo(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserAgentInfo as(Name alias) {
        return new UserAgentInfo(alias, this);
    }

    @Override
    @Nonnull
    public UserAgentInfo as(Table<?> alias) {
        return new UserAgentInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserAgentInfo rename(String name) {
        return new UserAgentInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserAgentInfo rename(Name name) {
        return new UserAgentInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserAgentInfo rename(Table<?> name) {
        return new UserAgentInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo where(Condition condition) {
        return new UserAgentInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public UserAgentInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public UserAgentInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public UserAgentInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public UserAgentInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public UserAgentInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
