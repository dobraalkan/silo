/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IUserAgentInfo;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_agent_info"
)
public record UserAgentInfo(
    @Nullable Integer id,
    @Nonnull String userName,
    @Nonnull String userAgent,
    @Nonnull String resolution,
    @Nonnull String operatingSystem,
    @Nonnull String ipAddress,
    @Nonnull Timestamp loginTimestamp
) implements IUserAgentInfo {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>user_agent_info.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>user_agent_info.user_name</code>.
     */
    @Column(name = "user_name", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getUserName() {
        return this.userName;
    }

    /**
     * Getter for <code>user_agent_info.user_agent</code>.
     */
    @Column(name = "user_agent", nullable = false, length = 500)
    @NotNull
    @Size(max = 500)
    @Nonnull
    @Override
    public String getUserAgent() {
        return this.userAgent;
    }

    /**
     * Getter for <code>user_agent_info.resolution</code>.
     */
    @Column(name = "resolution", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getResolution() {
        return this.resolution;
    }

    /**
     * Getter for <code>user_agent_info.operating_system</code>.
     */
    @Column(name = "operating_system", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getOperatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Getter for <code>user_agent_info.ip_address</code>.
     */
    @Column(name = "ip_address", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getIpAddress() {
        return this.ipAddress;
    }

    /**
     * Getter for <code>user_agent_info.login_timestamp</code>.
     */
    @Column(name = "login_timestamp", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    @Override
    public Timestamp getLoginTimestamp() {
        return this.loginTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserAgentInfo other = (UserAgentInfo) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userName == null) {
            if (other.userName != null)
                return false;
        }
        else if (!this.userName.equals(other.userName))
            return false;
        if (this.userAgent == null) {
            if (other.userAgent != null)
                return false;
        }
        else if (!this.userAgent.equals(other.userAgent))
            return false;
        if (this.resolution == null) {
            if (other.resolution != null)
                return false;
        }
        else if (!this.resolution.equals(other.resolution))
            return false;
        if (this.operatingSystem == null) {
            if (other.operatingSystem != null)
                return false;
        }
        else if (!this.operatingSystem.equals(other.operatingSystem))
            return false;
        if (this.ipAddress == null) {
            if (other.ipAddress != null)
                return false;
        }
        else if (!this.ipAddress.equals(other.ipAddress))
            return false;
        if (this.loginTimestamp == null) {
            if (other.loginTimestamp != null)
                return false;
        }
        else if (!this.loginTimestamp.equals(other.loginTimestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.userAgent == null) ? 0 : this.userAgent.hashCode());
        result = prime * result + ((this.resolution == null) ? 0 : this.resolution.hashCode());
        result = prime * result + ((this.operatingSystem == null) ? 0 : this.operatingSystem.hashCode());
        result = prime * result + ((this.ipAddress == null) ? 0 : this.ipAddress.hashCode());
        result = prime * result + ((this.loginTimestamp == null) ? 0 : this.loginTimestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserAgentInfo (");

        sb.append(id);
        sb.append(", ").append(userName);
        sb.append(", ").append(userAgent);
        sb.append(", ").append(resolution);
        sb.append(", ").append(operatingSystem);
        sb.append(", ").append(ipAddress);
        sb.append(", ").append(loginTimestamp);

        sb.append(")");
        return sb.toString();
    }
}
