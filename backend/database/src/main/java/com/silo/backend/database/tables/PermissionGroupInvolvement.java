/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.PermissionGroupInvolvementRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * links a group of involvements to a given operation on an entity kind
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PermissionGroupInvolvement extends TableImpl<PermissionGroupInvolvementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>permission_group_involvement</code>
     */
    public static final PermissionGroupInvolvement PERMISSION_GROUP_INVOLVEMENT = new PermissionGroupInvolvement();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PermissionGroupInvolvementRecord> getRecordType() {
        return PermissionGroupInvolvementRecord.class;
    }

    /**
     * The column <code>permission_group_involvement.permission_group_id</code>.
     * identifier of the permission group this association is tied to
     */
    public final TableField<PermissionGroupInvolvementRecord, Long> PERMISSION_GROUP_ID = createField(DSL.name("permission_group_id"), SQLDataType.BIGINT.nullable(false), this, "identifier of the permission group this association is tied to");

    /**
     * The column
     * <code>permission_group_involvement.involvement_group_id</code>.
     * identifier of the involvement group
     */
    public final TableField<PermissionGroupInvolvementRecord, Long> INVOLVEMENT_GROUP_ID = createField(DSL.name("involvement_group_id"), SQLDataType.BIGINT, this, "identifier of the involvement group");

    /**
     * The column <code>permission_group_involvement.operation</code>. type of
     * operation this involvement group is allowed to perform (one of: ADD,
     * ATTEST, REMOVE, UPDATE, UNKNOWN)
     */
    public final TableField<PermissionGroupInvolvementRecord, String> OPERATION = createField(DSL.name("operation"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "type of operation this involvement group is allowed to perform (one of: ADD, ATTEST, REMOVE, UPDATE, UNKNOWN)");

    /**
     * The column <code>permission_group_involvement.parent_kind</code>. kind of
     * the parent entity the change is related to e.g. APPLICATION
     */
    public final TableField<PermissionGroupInvolvementRecord, String> PARENT_KIND = createField(DSL.name("parent_kind"), SQLDataType.VARCHAR(64).nullable(false), this, "kind of the parent entity the change is related to e.g. APPLICATION");

    /**
     * The column <code>permission_group_involvement.subject_kind</code>. kind
     * of the entity the change acting upon e.g. MEASURABLE_RATING
     */
    public final TableField<PermissionGroupInvolvementRecord, String> SUBJECT_KIND = createField(DSL.name("subject_kind"), SQLDataType.VARCHAR(64), this, "kind of the entity the change acting upon e.g. MEASURABLE_RATING");

    /**
     * The column <code>permission_group_involvement.qualifier_kind</code>. kind
     * of qualifier entity needed to specify a more specific permission e.g.
     * MEASURABLE_CATEGORY
     */
    public final TableField<PermissionGroupInvolvementRecord, String> QUALIFIER_KIND = createField(DSL.name("qualifier_kind"), SQLDataType.VARCHAR(64), this, "kind of qualifier entity needed to specify a more specific permission e.g. MEASURABLE_CATEGORY");

    /**
     * The column <code>permission_group_involvement.qualifier_id</code>.
     * identifier of the qualifier entity needed to specify a more specific
     * permission
     */
    public final TableField<PermissionGroupInvolvementRecord, Long> QUALIFIER_ID = createField(DSL.name("qualifier_id"), SQLDataType.BIGINT, this, "identifier of the qualifier entity needed to specify a more specific permission");

    private PermissionGroupInvolvement(Name alias, Table<PermissionGroupInvolvementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PermissionGroupInvolvement(Name alias, Table<PermissionGroupInvolvementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("links a group of involvements to a given operation on an entity kind"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>permission_group_involvement</code> table
     * reference
     */
    public PermissionGroupInvolvement(String alias) {
        this(DSL.name(alias), PERMISSION_GROUP_INVOLVEMENT);
    }

    /**
     * Create an aliased <code>permission_group_involvement</code> table
     * reference
     */
    public PermissionGroupInvolvement(Name alias) {
        this(alias, PERMISSION_GROUP_INVOLVEMENT);
    }

    /**
     * Create a <code>permission_group_involvement</code> table reference
     */
    public PermissionGroupInvolvement() {
        this(DSL.name("permission_group_involvement"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public PermissionGroupInvolvement as(String alias) {
        return new PermissionGroupInvolvement(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PermissionGroupInvolvement as(Name alias) {
        return new PermissionGroupInvolvement(alias, this);
    }

    @Override
    @Nonnull
    public PermissionGroupInvolvement as(Table<?> alias) {
        return new PermissionGroupInvolvement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement rename(String name) {
        return new PermissionGroupInvolvement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement rename(Name name) {
        return new PermissionGroupInvolvement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement rename(Table<?> name) {
        return new PermissionGroupInvolvement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement where(Condition condition) {
        return new PermissionGroupInvolvement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PermissionGroupInvolvement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PermissionGroupInvolvement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PermissionGroupInvolvement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PermissionGroupInvolvement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PermissionGroupInvolvement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
