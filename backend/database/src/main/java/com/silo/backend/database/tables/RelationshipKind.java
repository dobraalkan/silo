/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.RelationshipKindRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Describes types of relationships between entities
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RelationshipKind extends TableImpl<RelationshipKindRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>relationship_kind</code>
     */
    public static final RelationshipKind RELATIONSHIP_KIND = new RelationshipKind();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<RelationshipKindRecord> getRecordType() {
        return RelationshipKindRecord.class;
    }

    /**
     * The column <code>relationship_kind.id</code>.
     */
    public final TableField<RelationshipKindRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>relationship_kind.name</code>.
     */
    public final TableField<RelationshipKindRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>relationship_kind.description</code>.
     */
    public final TableField<RelationshipKindRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>relationship_kind.kind_a</code>.
     */
    public final TableField<RelationshipKindRecord, String> KIND_A = createField(DSL.name("kind_a"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>relationship_kind.kind_b</code>.
     */
    public final TableField<RelationshipKindRecord, String> KIND_B = createField(DSL.name("kind_b"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>relationship_kind.category_a</code>. Placeholder: if
     * kind_a is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    public final TableField<RelationshipKindRecord, Long> CATEGORY_A = createField(DSL.name("category_a"), SQLDataType.BIGINT, this, "Placeholder: if kind_a is a MEASURABLE then this may (optionally) be used to restrict it based on category");

    /**
     * The column <code>relationship_kind.category_b</code>. Placeholder: if
     * kind_b is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    public final TableField<RelationshipKindRecord, Long> CATEGORY_B = createField(DSL.name("category_b"), SQLDataType.BIGINT, this, "Placeholder: if kind_b is a MEASURABLE then this may (optionally) be used to restrict it based on category");

    /**
     * The column <code>relationship_kind.is_readonly</code>.
     */
    public final TableField<RelationshipKindRecord, Boolean> IS_READONLY = createField(DSL.name("is_readonly"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>relationship_kind.code</code>.
     */
    public final TableField<RelationshipKindRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>relationship_kind.position</code>.
     */
    public final TableField<RelationshipKindRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>relationship_kind.reverse_name</code>.
     */
    public final TableField<RelationshipKindRecord, String> REVERSE_NAME = createField(DSL.name("reverse_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private RelationshipKind(Name alias, Table<RelationshipKindRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RelationshipKind(Name alias, Table<RelationshipKindRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Describes types of relationships between entities"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>relationship_kind</code> table reference
     */
    public RelationshipKind(String alias) {
        this(DSL.name(alias), RELATIONSHIP_KIND);
    }

    /**
     * Create an aliased <code>relationship_kind</code> table reference
     */
    public RelationshipKind(Name alias) {
        this(alias, RELATIONSHIP_KIND);
    }

    /**
     * Create a <code>relationship_kind</code> table reference
     */
    public RelationshipKind() {
        this(DSL.name("relationship_kind"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<RelationshipKindRecord, Long> getIdentity() {
        return (Identity<RelationshipKindRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public RelationshipKind as(String alias) {
        return new RelationshipKind(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public RelationshipKind as(Name alias) {
        return new RelationshipKind(alias, this);
    }

    @Override
    @Nonnull
    public RelationshipKind as(Table<?> alias) {
        return new RelationshipKind(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RelationshipKind rename(String name) {
        return new RelationshipKind(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RelationshipKind rename(Name name) {
        return new RelationshipKind(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RelationshipKind rename(Table<?> name) {
        return new RelationshipKind(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind where(Condition condition) {
        return new RelationshipKind(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public RelationshipKind where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public RelationshipKind where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public RelationshipKind where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public RelationshipKind where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public RelationshipKind whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
