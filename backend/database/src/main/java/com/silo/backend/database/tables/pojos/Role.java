/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IRole;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "role"
)
public record Role(
    @Nonnull String key,
    @Nullable Boolean isCustom,
    @Nonnull String name,
    @Nonnull String description,
    @Nullable Boolean userSelectable
) implements IRole {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>role.key</code>.
     */
    @Column(name = "key", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Getter for <code>role.is_custom</code>.
     */
    @Column(name = "is_custom")
    @Nullable
    @Override
    public Boolean getIsCustom() {
        return this.isCustom;
    }

    /**
     * Getter for <code>role.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>role.description</code>.
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>role.user_selectable</code>.
     */
    @Column(name = "user_selectable")
    @Nullable
    @Override
    public Boolean getUserSelectable() {
        return this.userSelectable;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Role other = (Role) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.isCustom == null) {
            if (other.isCustom != null)
                return false;
        }
        else if (!this.isCustom.equals(other.isCustom))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.userSelectable == null) {
            if (other.userSelectable != null)
                return false;
        }
        else if (!this.userSelectable.equals(other.userSelectable))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.isCustom == null) ? 0 : this.isCustom.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.userSelectable == null) ? 0 : this.userSelectable.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Role (");

        sb.append(key);
        sb.append(", ").append(isCustom);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(userSelectable);

        sb.append(")");
        return sb.toString();
    }
}
