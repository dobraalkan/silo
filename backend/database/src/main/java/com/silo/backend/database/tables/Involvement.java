/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.InvolvementRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * defines a specific instance of an involvement kind between a person and an
 * entity (e.g. 'User X' is 'IT Owner' for 'APPLICATION/32')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Involvement extends TableImpl<InvolvementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>involvement</code>
     */
    public static final Involvement INVOLVEMENT = new Involvement();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<InvolvementRecord> getRecordType() {
        return InvolvementRecord.class;
    }

    /**
     * The column <code>involvement.entity_kind</code>. the kind of entity the
     * person is involved with
     */
    public final TableField<InvolvementRecord, String> ENTITY_KIND = createField(DSL.name("entity_kind"), SQLDataType.VARCHAR(128).nullable(false), this, "the kind of entity the person is involved with");

    /**
     * The column <code>involvement.entity_id</code>. the identifier of the
     * entity the person is involved with
     */
    public final TableField<InvolvementRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "the identifier of the entity the person is involved with");

    /**
     * The column <code>involvement.employee_id</code>. reference to the person
     * involved with the entity
     */
    public final TableField<InvolvementRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(128).nullable(false), this, "reference to the person involved with the entity");

    /**
     * The column <code>involvement.provenance</code>. where did this
     * involvement record originate, will be 'waltz' if provided via the UI
     */
    public final TableField<InvolvementRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "where did this involvement record originate, will be 'waltz' if provided via the UI");

    /**
     * The column <code>involvement.kind_id</code>. the type of involvement
     * between the person and the entity (e.g. 'IT Owner')
     */
    public final TableField<InvolvementRecord, Long> KIND_ID = createField(DSL.name("kind_id"), SQLDataType.BIGINT.nullable(false), this, "the type of involvement between the person and the entity (e.g. 'IT Owner')");

    /**
     * The column <code>involvement.is_readonly</code>. can this involvement be
     * edited/removed by users (e.g. set to true if externally mastered)
     */
    public final TableField<InvolvementRecord, Boolean> IS_READONLY = createField(DSL.name("is_readonly"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("TRUE"), SQLDataType.BOOLEAN)), this, "can this involvement be edited/removed by users (e.g. set to true if externally mastered)");

    private Involvement(Name alias, Table<InvolvementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Involvement(Name alias, Table<InvolvementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("defines a specific instance of an involvement kind between a person and an entity (e.g. 'User X' is 'IT Owner' for 'APPLICATION/32')"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>involvement</code> table reference
     */
    public Involvement(String alias) {
        this(DSL.name(alias), INVOLVEMENT);
    }

    /**
     * Create an aliased <code>involvement</code> table reference
     */
    public Involvement(Name alias) {
        this(alias, INVOLVEMENT);
    }

    /**
     * Create a <code>involvement</code> table reference
     */
    public Involvement() {
        this(DSL.name("involvement"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Involvement as(String alias) {
        return new Involvement(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Involvement as(Name alias) {
        return new Involvement(alias, this);
    }

    @Override
    @Nonnull
    public Involvement as(Table<?> alias) {
        return new Involvement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Involvement rename(String name) {
        return new Involvement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Involvement rename(Name name) {
        return new Involvement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Involvement rename(Table<?> name) {
        return new Involvement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement where(Condition condition) {
        return new Involvement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Involvement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Involvement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Involvement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Involvement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Involvement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
