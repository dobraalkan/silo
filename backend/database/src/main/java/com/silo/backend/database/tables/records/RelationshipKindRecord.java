/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.RelationshipKind;
import com.silo.backend.database.tables.interfaces.IRelationshipKind;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * Describes types of relationships between entities
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "relationship_kind"
)
public class RelationshipKindRecord extends TableRecordImpl<RelationshipKindRecord> implements IRelationshipKind {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>relationship_kind.id</code>.
     */
    public RelationshipKindRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>relationship_kind.name</code>.
     */
    public RelationshipKindRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>relationship_kind.description</code>.
     */
    public RelationshipKindRecord setDescription(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.description</code>.
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>relationship_kind.kind_a</code>.
     */
    public RelationshipKindRecord setKindA(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.kind_a</code>.
     */
    @Column(name = "kind_a", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getKindA() {
        return (String) get(3);
    }

    /**
     * Setter for <code>relationship_kind.kind_b</code>.
     */
    public RelationshipKindRecord setKindB(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.kind_b</code>.
     */
    @Column(name = "kind_b", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getKindB() {
        return (String) get(4);
    }

    /**
     * Setter for <code>relationship_kind.category_a</code>. Placeholder: if
     * kind_a is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    public RelationshipKindRecord setCategoryA(@Nullable Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.category_a</code>. Placeholder: if
     * kind_a is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_a")
    @Nullable
    @Override
    public Long getCategoryA() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>relationship_kind.category_b</code>. Placeholder: if
     * kind_b is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    public RelationshipKindRecord setCategoryB(@Nullable Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.category_b</code>. Placeholder: if
     * kind_b is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_b")
    @Nullable
    @Override
    public Long getCategoryB() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>relationship_kind.is_readonly</code>.
     */
    public RelationshipKindRecord setIsReadonly(@Nullable Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.is_readonly</code>.
     */
    @Column(name = "is_readonly")
    @Nullable
    @Override
    public Boolean getIsReadonly() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>relationship_kind.code</code>.
     */
    public RelationshipKindRecord setCode(@Nonnull String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.code</code>.
     */
    @Column(name = "code", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>relationship_kind.position</code>.
     */
    public RelationshipKindRecord setPosition(@Nullable Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.position</code>.
     */
    @Column(name = "position")
    @Nullable
    @Override
    public Integer getPosition() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>relationship_kind.reverse_name</code>.
     */
    public RelationshipKindRecord setReverseName(@Nonnull String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>relationship_kind.reverse_name</code>.
     */
    @Column(name = "reverse_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getReverseName() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IRelationshipKind from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
        setKindA(from.getKindA());
        setKindB(from.getKindB());
        setCategoryA(from.getCategoryA());
        setCategoryB(from.getCategoryB());
        setIsReadonly(from.getIsReadonly());
        setCode(from.getCode());
        setPosition(from.getPosition());
        setReverseName(from.getReverseName());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RelationshipKindRecord
     */
    public RelationshipKindRecord() {
        super(RelationshipKind.RELATIONSHIP_KIND);
    }

    /**
     * Create a detached, initialised RelationshipKindRecord
     */
    @ConstructorProperties({ "id", "name", "description", "kindA", "kindB", "categoryA", "categoryB", "isReadonly", "code", "position", "reverseName" })
    public RelationshipKindRecord(@Nullable Long id, @Nonnull String name, @Nullable String description, @Nonnull String kindA, @Nonnull String kindB, @Nullable Long categoryA, @Nullable Long categoryB, @Nullable Boolean isReadonly, @Nonnull String code, @Nullable Integer position, @Nonnull String reverseName) {
        super(RelationshipKind.RELATIONSHIP_KIND);

        setId(id);
        setName(name);
        setDescription(description);
        setKindA(kindA);
        setKindB(kindB);
        setCategoryA(categoryA);
        setCategoryB(categoryB);
        setIsReadonly(isReadonly);
        setCode(code);
        setPosition(position);
        setReverseName(reverseName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RelationshipKindRecord
     */
    public RelationshipKindRecord(com.silo.backend.database.tables.pojos.RelationshipKind value) {
        super(RelationshipKind.RELATIONSHIP_KIND);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setDescription(value.description());
            setKindA(value.kindA());
            setKindB(value.kindB());
            setCategoryA(value.categoryA());
            setCategoryB(value.categoryB());
            setIsReadonly(value.isReadonly());
            setCode(value.code());
            setPosition(value.position());
            setReverseName(value.reverseName());
            resetChangedOnNotNull();
        }
    }
}
