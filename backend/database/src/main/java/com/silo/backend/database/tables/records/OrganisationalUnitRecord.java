/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.OrganisationalUnit;
import com.silo.backend.database.tables.interfaces.IOrganisationalUnit;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "organisational_unit"
)
public class OrganisationalUnitRecord extends TableRecordImpl<OrganisationalUnitRecord> implements IOrganisationalUnit {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>organisational_unit.id</code>.
     */
    public OrganisationalUnitRecord setId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.id</code>.
     */
    @Column(name = "id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>organisational_unit.name</code>.
     */
    public OrganisationalUnitRecord setName(@Nullable String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.name</code>.
     */
    @Column(name = "name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>organisational_unit.description</code>.
     */
    public OrganisationalUnitRecord setDescription(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.description</code>.
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>organisational_unit.parent_id</code>.
     */
    public OrganisationalUnitRecord setParentId(@Nullable Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.parent_id</code>.
     */
    @Column(name = "parent_id")
    @Nullable
    @Override
    public Long getParentId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>organisational_unit.created_at</code>.
     */
    public OrganisationalUnitRecord setCreatedAt(@Nullable Timestamp value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.created_at</code>.
     */
    @Column(name = "created_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getCreatedAt() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>organisational_unit.last_updated_at</code>.
     */
    public OrganisationalUnitRecord setLastUpdatedAt(@Nonnull Timestamp value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    @Override
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>organisational_unit.external_id</code>.
     */
    public OrganisationalUnitRecord setExternalId(@Nullable String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.external_id</code>.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>organisational_unit.created_by</code>.
     */
    public OrganisationalUnitRecord setCreatedBy(@Nullable String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.created_by</code>.
     */
    @Column(name = "created_by", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getCreatedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>organisational_unit.last_updated_by</code>.
     */
    public OrganisationalUnitRecord setLastUpdatedBy(@Nullable String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getLastUpdatedBy() {
        return (String) get(8);
    }

    /**
     * Setter for <code>organisational_unit.provenance</code>.
     */
    public OrganisationalUnitRecord setProvenance(@Nullable String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>organisational_unit.provenance</code>.
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IOrganisationalUnit from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
        setParentId(from.getParentId());
        setCreatedAt(from.getCreatedAt());
        setLastUpdatedAt(from.getLastUpdatedAt());
        setExternalId(from.getExternalId());
        setCreatedBy(from.getCreatedBy());
        setLastUpdatedBy(from.getLastUpdatedBy());
        setProvenance(from.getProvenance());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrganisationalUnitRecord
     */
    public OrganisationalUnitRecord() {
        super(OrganisationalUnit.ORGANISATIONAL_UNIT);
    }

    /**
     * Create a detached, initialised OrganisationalUnitRecord
     */
    @ConstructorProperties({ "id", "name", "description", "parentId", "createdAt", "lastUpdatedAt", "externalId", "createdBy", "lastUpdatedBy", "provenance" })
    public OrganisationalUnitRecord(@Nonnull Long id, @Nullable String name, @Nullable String description, @Nullable Long parentId, @Nullable Timestamp createdAt, @Nonnull Timestamp lastUpdatedAt, @Nullable String externalId, @Nullable String createdBy, @Nullable String lastUpdatedBy, @Nullable String provenance) {
        super(OrganisationalUnit.ORGANISATIONAL_UNIT);

        setId(id);
        setName(name);
        setDescription(description);
        setParentId(parentId);
        setCreatedAt(createdAt);
        setLastUpdatedAt(lastUpdatedAt);
        setExternalId(externalId);
        setCreatedBy(createdBy);
        setLastUpdatedBy(lastUpdatedBy);
        setProvenance(provenance);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised OrganisationalUnitRecord
     */
    public OrganisationalUnitRecord(com.silo.backend.database.tables.pojos.OrganisationalUnit value) {
        super(OrganisationalUnit.ORGANISATIONAL_UNIT);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setDescription(value.description());
            setParentId(value.parentId());
            setCreatedAt(value.createdAt());
            setLastUpdatedAt(value.lastUpdatedAt());
            setExternalId(value.externalId());
            setCreatedBy(value.createdBy());
            setLastUpdatedBy(value.lastUpdatedBy());
            setProvenance(value.provenance());
            resetChangedOnNotNull();
        }
    }
}
