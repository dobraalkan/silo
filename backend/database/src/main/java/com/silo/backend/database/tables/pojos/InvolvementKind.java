/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IInvolvementKind;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * defines a particular type of involvement a person may have in relation to an
 * entity (e.g. IT Owner for an APPLICATION)
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "involvement_kind"
)
public record InvolvementKind(
    @Nullable Long id,
    @Nonnull String description,
    @Nullable Timestamp lastUpdatedAt,
    @Nonnull String lastUpdatedBy,
    @Nullable String externalId,
    @Nullable Boolean userSelectable,
    @Nonnull String subjectKind,
    @Nonnull String name,
    @Nullable String permittedRole
) implements IInvolvementKind {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>involvement_kind.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>involvement_kind.description</code>. longer textual
     * description of the involvement
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>involvement_kind.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Getter for <code>involvement_kind.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    /**
     * Getter for <code>involvement_kind.external_id</code>. external
     * identifier, typically used when external jobs are updating the associated
     * involvements
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Getter for <code>involvement_kind.user_selectable</code>. flag to allow
     * users to add people to an entity with this involvement (set to false to
     * restrict usage, i.e. if involvement is mastered in another system)
     */
    @Column(name = "user_selectable")
    @Nullable
    @Override
    public Boolean getUserSelectable() {
        return this.userSelectable;
    }

    /**
     * Getter for <code>involvement_kind.subject_kind</code>.
     */
    @Column(name = "subject_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getSubjectKind() {
        return this.subjectKind;
    }

    /**
     * Getter for <code>involvement_kind.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>involvement_kind.permitted_role</code>.
     */
    @Column(name = "permitted_role", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getPermittedRole() {
        return this.permittedRole;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InvolvementKind other = (InvolvementKind) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.lastUpdatedAt == null) {
            if (other.lastUpdatedAt != null)
                return false;
        }
        else if (!this.lastUpdatedAt.equals(other.lastUpdatedAt))
            return false;
        if (this.lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!this.lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        if (this.userSelectable == null) {
            if (other.userSelectable != null)
                return false;
        }
        else if (!this.userSelectable.equals(other.userSelectable))
            return false;
        if (this.subjectKind == null) {
            if (other.subjectKind != null)
                return false;
        }
        else if (!this.subjectKind.equals(other.subjectKind))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.permittedRole == null) {
            if (other.permittedRole != null)
                return false;
        }
        else if (!this.permittedRole.equals(other.permittedRole))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.lastUpdatedAt == null) ? 0 : this.lastUpdatedAt.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        result = prime * result + ((this.userSelectable == null) ? 0 : this.userSelectable.hashCode());
        result = prime * result + ((this.subjectKind == null) ? 0 : this.subjectKind.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.permittedRole == null) ? 0 : this.permittedRole.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InvolvementKind (");

        sb.append(id);
        sb.append(", ").append(description);
        sb.append(", ").append(lastUpdatedAt);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(externalId);
        sb.append(", ").append(userSelectable);
        sb.append(", ").append(subjectKind);
        sb.append(", ").append(name);
        sb.append(", ").append(permittedRole);

        sb.append(")");
        return sb.toString();
    }
}
