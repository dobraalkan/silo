/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.ServerInformation;
import com.silo.backend.database.tables.interfaces.IServerInformation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Date;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "server_information"
)
public class ServerInformationRecord extends TableRecordImpl<ServerInformationRecord> implements IServerInformation {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>server_information.id</code>.
     */
    public ServerInformationRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>server_information.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>server_information.hostname</code>.
     */
    public ServerInformationRecord setHostname(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>server_information.hostname</code>.
     */
    @Column(name = "hostname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getHostname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>server_information.operating_system</code>.
     */
    public ServerInformationRecord setOperatingSystem(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>server_information.operating_system</code>.
     */
    @Column(name = "operating_system", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getOperatingSystem() {
        return (String) get(2);
    }

    /**
     * Setter for <code>server_information.location</code>.
     */
    public ServerInformationRecord setLocation(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>server_information.location</code>.
     */
    @Column(name = "location", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getLocation() {
        return (String) get(3);
    }

    /**
     * Setter for <code>server_information.operating_system_version</code>.
     */
    public ServerInformationRecord setOperatingSystemVersion(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>server_information.operating_system_version</code>.
     */
    @Column(name = "operating_system_version", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getOperatingSystemVersion() {
        return (String) get(4);
    }

    /**
     * Setter for <code>server_information.country</code>.
     */
    public ServerInformationRecord setCountry(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>server_information.country</code>.
     */
    @Column(name = "country", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getCountry() {
        return (String) get(5);
    }

    /**
     * Setter for <code>server_information.is_virtual</code>.
     */
    public ServerInformationRecord setIsVirtual(@Nullable Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>server_information.is_virtual</code>.
     */
    @Column(name = "is_virtual")
    @Nullable
    @Override
    public Boolean getIsVirtual() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>server_information.provenance</code>.
     */
    public ServerInformationRecord setProvenance(@Nullable String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>server_information.provenance</code>.
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(7);
    }

    /**
     * Setter for <code>server_information.os_end_of_life_date</code>.
     */
    public ServerInformationRecord setOsEndOfLifeDate(@Nullable Date value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>server_information.os_end_of_life_date</code>.
     */
    @Column(name = "os_end_of_life_date")
    @Nullable
    @Override
    public Date getOsEndOfLifeDate() {
        return (Date) get(8);
    }

    /**
     * Setter for <code>server_information.hw_end_of_life_date</code>.
     */
    public ServerInformationRecord setHwEndOfLifeDate(@Nullable Date value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>server_information.hw_end_of_life_date</code>.
     */
    @Column(name = "hw_end_of_life_date")
    @Nullable
    @Override
    public Date getHwEndOfLifeDate() {
        return (Date) get(9);
    }

    /**
     * Setter for <code>server_information.lifecycle_status</code>.
     */
    public ServerInformationRecord setLifecycleStatus(@Nullable String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>server_information.lifecycle_status</code>.
     */
    @Column(name = "lifecycle_status", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getLifecycleStatus() {
        return (String) get(10);
    }

    /**
     * Setter for <code>server_information.external_id</code>.
     */
    public ServerInformationRecord setExternalId(@Nullable String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>server_information.external_id</code>.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IServerInformation from) {
        setId(from.getId());
        setHostname(from.getHostname());
        setOperatingSystem(from.getOperatingSystem());
        setLocation(from.getLocation());
        setOperatingSystemVersion(from.getOperatingSystemVersion());
        setCountry(from.getCountry());
        setIsVirtual(from.getIsVirtual());
        setProvenance(from.getProvenance());
        setOsEndOfLifeDate(from.getOsEndOfLifeDate());
        setHwEndOfLifeDate(from.getHwEndOfLifeDate());
        setLifecycleStatus(from.getLifecycleStatus());
        setExternalId(from.getExternalId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServerInformationRecord
     */
    public ServerInformationRecord() {
        super(ServerInformation.SERVER_INFORMATION);
    }

    /**
     * Create a detached, initialised ServerInformationRecord
     */
    @ConstructorProperties({ "id", "hostname", "operatingSystem", "location", "operatingSystemVersion", "country", "isVirtual", "provenance", "osEndOfLifeDate", "hwEndOfLifeDate", "lifecycleStatus", "externalId" })
    public ServerInformationRecord(@Nullable Long id, @Nonnull String hostname, @Nullable String operatingSystem, @Nonnull String location, @Nonnull String operatingSystemVersion, @Nonnull String country, @Nullable Boolean isVirtual, @Nullable String provenance, @Nullable Date osEndOfLifeDate, @Nullable Date hwEndOfLifeDate, @Nullable String lifecycleStatus, @Nullable String externalId) {
        super(ServerInformation.SERVER_INFORMATION);

        setId(id);
        setHostname(hostname);
        setOperatingSystem(operatingSystem);
        setLocation(location);
        setOperatingSystemVersion(operatingSystemVersion);
        setCountry(country);
        setIsVirtual(isVirtual);
        setProvenance(provenance);
        setOsEndOfLifeDate(osEndOfLifeDate);
        setHwEndOfLifeDate(hwEndOfLifeDate);
        setLifecycleStatus(lifecycleStatus);
        setExternalId(externalId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ServerInformationRecord
     */
    public ServerInformationRecord(com.silo.backend.database.tables.pojos.ServerInformation value) {
        super(ServerInformation.SERVER_INFORMATION);

        if (value != null) {
            setId(value.id());
            setHostname(value.hostname());
            setOperatingSystem(value.operatingSystem());
            setLocation(value.location());
            setOperatingSystemVersion(value.operatingSystemVersion());
            setCountry(value.country());
            setIsVirtual(value.isVirtual());
            setProvenance(value.provenance());
            setOsEndOfLifeDate(value.osEndOfLifeDate());
            setHwEndOfLifeDate(value.hwEndOfLifeDate());
            setLifecycleStatus(value.lifecycleStatus());
            setExternalId(value.externalId());
            resetChangedOnNotNull();
        }
    }
}
