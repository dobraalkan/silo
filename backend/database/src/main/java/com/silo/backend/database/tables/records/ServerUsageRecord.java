/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.ServerUsage;
import com.silo.backend.database.tables.interfaces.IServerUsage;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "server_usage"
)
public class ServerUsageRecord extends TableRecordImpl<ServerUsageRecord> implements IServerUsage {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>server_usage.server_id</code>.
     */
    public ServerUsageRecord setServerId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.server_id</code>.
     */
    @Column(name = "server_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getServerId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>server_usage.entity_kind</code>.
     */
    public ServerUsageRecord setEntityKind(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.entity_kind</code>.
     */
    @Column(name = "entity_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getEntityKind() {
        return (String) get(1);
    }

    /**
     * Setter for <code>server_usage.entity_id</code>.
     */
    public ServerUsageRecord setEntityId(@Nonnull Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.entity_id</code>.
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getEntityId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>server_usage.environment</code>.
     */
    public ServerUsageRecord setEnvironment(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.environment</code>.
     */
    @Column(name = "environment", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getEnvironment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>server_usage.last_updated_at</code>.
     */
    public ServerUsageRecord setLastUpdatedAt(@Nullable Timestamp value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>server_usage.last_updated_by</code>.
     */
    public ServerUsageRecord setLastUpdatedBy(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>server_usage.provenance</code>.
     */
    public ServerUsageRecord setProvenance(@Nonnull String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.provenance</code>.
     */
    @Column(name = "provenance", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getProvenance() {
        return (String) get(6);
    }

    /**
     * Setter for <code>server_usage.id</code>.
     */
    public ServerUsageRecord setId(@Nullable Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>server_usage.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IServerUsage from) {
        setServerId(from.getServerId());
        setEntityKind(from.getEntityKind());
        setEntityId(from.getEntityId());
        setEnvironment(from.getEnvironment());
        setLastUpdatedAt(from.getLastUpdatedAt());
        setLastUpdatedBy(from.getLastUpdatedBy());
        setProvenance(from.getProvenance());
        setId(from.getId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServerUsageRecord
     */
    public ServerUsageRecord() {
        super(ServerUsage.SERVER_USAGE);
    }

    /**
     * Create a detached, initialised ServerUsageRecord
     */
    @ConstructorProperties({ "serverId", "entityKind", "entityId", "environment", "lastUpdatedAt", "lastUpdatedBy", "provenance", "id" })
    public ServerUsageRecord(@Nonnull Long serverId, @Nonnull String entityKind, @Nonnull Long entityId, @Nullable String environment, @Nullable Timestamp lastUpdatedAt, @Nonnull String lastUpdatedBy, @Nonnull String provenance, @Nullable Long id) {
        super(ServerUsage.SERVER_USAGE);

        setServerId(serverId);
        setEntityKind(entityKind);
        setEntityId(entityId);
        setEnvironment(environment);
        setLastUpdatedAt(lastUpdatedAt);
        setLastUpdatedBy(lastUpdatedBy);
        setProvenance(provenance);
        setId(id);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ServerUsageRecord
     */
    public ServerUsageRecord(com.silo.backend.database.tables.pojos.ServerUsage value) {
        super(ServerUsage.SERVER_USAGE);

        if (value != null) {
            setServerId(value.serverId());
            setEntityKind(value.entityKind());
            setEntityId(value.entityId());
            setEnvironment(value.environment());
            setLastUpdatedAt(value.lastUpdatedAt());
            setLastUpdatedBy(value.lastUpdatedBy());
            setProvenance(value.provenance());
            setId(value.id());
            resetChangedOnNotNull();
        }
    }
}
