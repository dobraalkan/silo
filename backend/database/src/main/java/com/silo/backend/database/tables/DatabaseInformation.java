/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.DatabaseInformationRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Date;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DatabaseInformation extends TableImpl<DatabaseInformationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>database_information</code>
     */
    public static final DatabaseInformation DATABASE_INFORMATION = new DatabaseInformation();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<DatabaseInformationRecord> getRecordType() {
        return DatabaseInformationRecord.class;
    }

    /**
     * The column <code>database_information.id</code>.
     */
    public final TableField<DatabaseInformationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>database_information.database_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.instance_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> INSTANCE_NAME = createField(DSL.name("instance_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.dbms_vendor</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_VENDOR = createField(DSL.name("dbms_vendor"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>database_information.dbms_name</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_NAME = createField(DSL.name("dbms_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>database_information.dbms_version</code>.
     */
    public final TableField<DatabaseInformationRecord, String> DBMS_VERSION = createField(DSL.name("dbms_version"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>database_information.external_id</code>.
     */
    public final TableField<DatabaseInformationRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>database_information.end_of_life_date</code>.
     */
    public final TableField<DatabaseInformationRecord, Date> END_OF_LIFE_DATE = createField(DSL.name("end_of_life_date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>database_information.lifecycle_status</code>.
     */
    public final TableField<DatabaseInformationRecord, String> LIFECYCLE_STATUS = createField(DSL.name("lifecycle_status"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>database_information.provenance</code>.
     */
    public final TableField<DatabaseInformationRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    private DatabaseInformation(Name alias, Table<DatabaseInformationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DatabaseInformation(Name alias, Table<DatabaseInformationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>database_information</code> table reference
     */
    public DatabaseInformation(String alias) {
        this(DSL.name(alias), DATABASE_INFORMATION);
    }

    /**
     * Create an aliased <code>database_information</code> table reference
     */
    public DatabaseInformation(Name alias) {
        this(alias, DATABASE_INFORMATION);
    }

    /**
     * Create a <code>database_information</code> table reference
     */
    public DatabaseInformation() {
        this(DSL.name("database_information"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<DatabaseInformationRecord, Long> getIdentity() {
        return (Identity<DatabaseInformationRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public DatabaseInformation as(String alias) {
        return new DatabaseInformation(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public DatabaseInformation as(Name alias) {
        return new DatabaseInformation(alias, this);
    }

    @Override
    @Nonnull
    public DatabaseInformation as(Table<?> alias) {
        return new DatabaseInformation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DatabaseInformation rename(String name) {
        return new DatabaseInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DatabaseInformation rename(Name name) {
        return new DatabaseInformation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DatabaseInformation rename(Table<?> name) {
        return new DatabaseInformation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation where(Condition condition) {
        return new DatabaseInformation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public DatabaseInformation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public DatabaseInformation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public DatabaseInformation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public DatabaseInformation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public DatabaseInformation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
