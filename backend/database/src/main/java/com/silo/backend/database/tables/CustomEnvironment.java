/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.CustomEnvironmentRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CustomEnvironment extends TableImpl<CustomEnvironmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>custom_environment</code>
     */
    public static final CustomEnvironment CUSTOM_ENVIRONMENT = new CustomEnvironment();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<CustomEnvironmentRecord> getRecordType() {
        return CustomEnvironmentRecord.class;
    }

    /**
     * The column <code>custom_environment.id</code>.
     */
    public final TableField<CustomEnvironmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>custom_environment.owning_entity_id</code>.
     */
    public final TableField<CustomEnvironmentRecord, Long> OWNING_ENTITY_ID = createField(DSL.name("owning_entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>custom_environment.owning_entity_kind</code>.
     */
    public final TableField<CustomEnvironmentRecord, String> OWNING_ENTITY_KIND = createField(DSL.name("owning_entity_kind"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>custom_environment.name</code>.
     */
    public final TableField<CustomEnvironmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>custom_environment.description</code>.
     */
    public final TableField<CustomEnvironmentRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>custom_environment.external_id</code>.
     */
    public final TableField<CustomEnvironmentRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>custom_environment.group_name</code>.
     */
    public final TableField<CustomEnvironmentRecord, String> GROUP_NAME = createField(DSL.name("group_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'Default'"), SQLDataType.VARCHAR)), this, "");

    private CustomEnvironment(Name alias, Table<CustomEnvironmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CustomEnvironment(Name alias, Table<CustomEnvironmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>custom_environment</code> table reference
     */
    public CustomEnvironment(String alias) {
        this(DSL.name(alias), CUSTOM_ENVIRONMENT);
    }

    /**
     * Create an aliased <code>custom_environment</code> table reference
     */
    public CustomEnvironment(Name alias) {
        this(alias, CUSTOM_ENVIRONMENT);
    }

    /**
     * Create a <code>custom_environment</code> table reference
     */
    public CustomEnvironment() {
        this(DSL.name("custom_environment"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<CustomEnvironmentRecord, Long> getIdentity() {
        return (Identity<CustomEnvironmentRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public CustomEnvironment as(String alias) {
        return new CustomEnvironment(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public CustomEnvironment as(Name alias) {
        return new CustomEnvironment(alias, this);
    }

    @Override
    @Nonnull
    public CustomEnvironment as(Table<?> alias) {
        return new CustomEnvironment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CustomEnvironment rename(String name) {
        return new CustomEnvironment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CustomEnvironment rename(Name name) {
        return new CustomEnvironment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CustomEnvironment rename(Table<?> name) {
        return new CustomEnvironment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment where(Condition condition) {
        return new CustomEnvironment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public CustomEnvironment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public CustomEnvironment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public CustomEnvironment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public CustomEnvironment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public CustomEnvironment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
