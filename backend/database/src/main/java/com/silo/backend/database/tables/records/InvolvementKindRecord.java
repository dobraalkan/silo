/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.InvolvementKind;
import com.silo.backend.database.tables.interfaces.IInvolvementKind;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * defines a particular type of involvement a person may have in relation to an
 * entity (e.g. IT Owner for an APPLICATION)
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "involvement_kind"
)
public class InvolvementKindRecord extends TableRecordImpl<InvolvementKindRecord> implements IInvolvementKind {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>involvement_kind.id</code>.
     */
    public InvolvementKindRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>involvement_kind.description</code>. longer textual
     * description of the involvement
     */
    public InvolvementKindRecord setDescription(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.description</code>. longer textual
     * description of the involvement
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    @Override
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>involvement_kind.last_updated_at</code>.
     */
    public InvolvementKindRecord setLastUpdatedAt(@Nullable Timestamp value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>involvement_kind.last_updated_by</code>.
     */
    public InvolvementKindRecord setLastUpdatedBy(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>involvement_kind.external_id</code>. external
     * identifier, typically used when external jobs are updating the associated
     * involvements
     */
    public InvolvementKindRecord setExternalId(@Nullable String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.external_id</code>. external
     * identifier, typically used when external jobs are updating the associated
     * involvements
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>involvement_kind.user_selectable</code>. flag to allow
     * users to add people to an entity with this involvement (set to false to
     * restrict usage, i.e. if involvement is mastered in another system)
     */
    public InvolvementKindRecord setUserSelectable(@Nullable Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.user_selectable</code>. flag to allow
     * users to add people to an entity with this involvement (set to false to
     * restrict usage, i.e. if involvement is mastered in another system)
     */
    @Column(name = "user_selectable")
    @Nullable
    @Override
    public Boolean getUserSelectable() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>involvement_kind.subject_kind</code>.
     */
    public InvolvementKindRecord setSubjectKind(@Nonnull String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.subject_kind</code>.
     */
    @Column(name = "subject_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getSubjectKind() {
        return (String) get(6);
    }

    /**
     * Setter for <code>involvement_kind.name</code>.
     */
    public InvolvementKindRecord setName(@Nonnull String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>involvement_kind.permitted_role</code>.
     */
    public InvolvementKindRecord setPermittedRole(@Nullable String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>involvement_kind.permitted_role</code>.
     */
    @Column(name = "permitted_role", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getPermittedRole() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IInvolvementKind from) {
        setId(from.getId());
        setDescription(from.getDescription());
        setLastUpdatedAt(from.getLastUpdatedAt());
        setLastUpdatedBy(from.getLastUpdatedBy());
        setExternalId(from.getExternalId());
        setUserSelectable(from.getUserSelectable());
        setSubjectKind(from.getSubjectKind());
        setName(from.getName());
        setPermittedRole(from.getPermittedRole());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InvolvementKindRecord
     */
    public InvolvementKindRecord() {
        super(InvolvementKind.INVOLVEMENT_KIND);
    }

    /**
     * Create a detached, initialised InvolvementKindRecord
     */
    @ConstructorProperties({ "id", "description", "lastUpdatedAt", "lastUpdatedBy", "externalId", "userSelectable", "subjectKind", "name", "permittedRole" })
    public InvolvementKindRecord(@Nullable Long id, @Nonnull String description, @Nullable Timestamp lastUpdatedAt, @Nonnull String lastUpdatedBy, @Nullable String externalId, @Nullable Boolean userSelectable, @Nonnull String subjectKind, @Nonnull String name, @Nullable String permittedRole) {
        super(InvolvementKind.INVOLVEMENT_KIND);

        setId(id);
        setDescription(description);
        setLastUpdatedAt(lastUpdatedAt);
        setLastUpdatedBy(lastUpdatedBy);
        setExternalId(externalId);
        setUserSelectable(userSelectable);
        setSubjectKind(subjectKind);
        setName(name);
        setPermittedRole(permittedRole);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InvolvementKindRecord
     */
    public InvolvementKindRecord(com.silo.backend.database.tables.pojos.InvolvementKind value) {
        super(InvolvementKind.INVOLVEMENT_KIND);

        if (value != null) {
            setId(value.id());
            setDescription(value.description());
            setLastUpdatedAt(value.lastUpdatedAt());
            setLastUpdatedBy(value.lastUpdatedBy());
            setExternalId(value.externalId());
            setUserSelectable(value.userSelectable());
            setSubjectKind(value.subjectKind());
            setName(value.name());
            setPermittedRole(value.permittedRole());
            resetChangedOnNotNull();
        }
    }
}
