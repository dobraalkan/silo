/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.InvolvementGroupEntryRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * describes the association of an involvement kind to an involvement group
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvolvementGroupEntry extends TableImpl<InvolvementGroupEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>involvement_group_entry</code>
     */
    public static final InvolvementGroupEntry INVOLVEMENT_GROUP_ENTRY = new InvolvementGroupEntry();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<InvolvementGroupEntryRecord> getRecordType() {
        return InvolvementGroupEntryRecord.class;
    }

    /**
     * The column <code>involvement_group_entry.involvement_group_id</code>.
     * identifier of the group this involvement kind is included in
     */
    public final TableField<InvolvementGroupEntryRecord, Long> INVOLVEMENT_GROUP_ID = createField(DSL.name("involvement_group_id"), SQLDataType.BIGINT.nullable(false), this, "identifier of the group this involvement kind is included in");

    /**
     * The column <code>involvement_group_entry.involvement_kind_id</code>.
     * identifier of the involvement kind this entry refers to
     */
    public final TableField<InvolvementGroupEntryRecord, Long> INVOLVEMENT_KIND_ID = createField(DSL.name("involvement_kind_id"), SQLDataType.BIGINT.nullable(false), this, "identifier of the involvement kind this entry refers to");

    private InvolvementGroupEntry(Name alias, Table<InvolvementGroupEntryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InvolvementGroupEntry(Name alias, Table<InvolvementGroupEntryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("describes the association of an involvement kind to an involvement group"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>involvement_group_entry</code> table reference
     */
    public InvolvementGroupEntry(String alias) {
        this(DSL.name(alias), INVOLVEMENT_GROUP_ENTRY);
    }

    /**
     * Create an aliased <code>involvement_group_entry</code> table reference
     */
    public InvolvementGroupEntry(Name alias) {
        this(alias, INVOLVEMENT_GROUP_ENTRY);
    }

    /**
     * Create a <code>involvement_group_entry</code> table reference
     */
    public InvolvementGroupEntry() {
        this(DSL.name("involvement_group_entry"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public InvolvementGroupEntry as(String alias) {
        return new InvolvementGroupEntry(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public InvolvementGroupEntry as(Name alias) {
        return new InvolvementGroupEntry(alias, this);
    }

    @Override
    @Nonnull
    public InvolvementGroupEntry as(Table<?> alias) {
        return new InvolvementGroupEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry rename(String name) {
        return new InvolvementGroupEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry rename(Name name) {
        return new InvolvementGroupEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry rename(Table<?> name) {
        return new InvolvementGroupEntry(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry where(Condition condition) {
        return new InvolvementGroupEntry(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroupEntry where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroupEntry where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroupEntry where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroupEntry where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroupEntry whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
