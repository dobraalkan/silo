/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.InvolvementKindRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * defines a particular type of involvement a person may have in relation to an
 * entity (e.g. IT Owner for an APPLICATION)
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvolvementKind extends TableImpl<InvolvementKindRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>involvement_kind</code>
     */
    public static final InvolvementKind INVOLVEMENT_KIND = new InvolvementKind();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<InvolvementKindRecord> getRecordType() {
        return InvolvementKindRecord.class;
    }

    /**
     * The column <code>involvement_kind.id</code>.
     */
    public final TableField<InvolvementKindRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>involvement_kind.description</code>. longer textual
     * description of the involvement
     */
    public final TableField<InvolvementKindRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000).nullable(false), this, "longer textual description of the involvement");

    /**
     * The column <code>involvement_kind.last_updated_at</code>.
     */
    public final TableField<InvolvementKindRecord, Timestamp> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMP(6).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>involvement_kind.last_updated_by</code>.
     */
    public final TableField<InvolvementKindRecord, String> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>involvement_kind.external_id</code>. external
     * identifier, typically used when external jobs are updating the associated
     * involvements
     */
    public final TableField<InvolvementKindRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200), this, "external identifier, typically used when external jobs are updating the associated involvements");

    /**
     * The column <code>involvement_kind.user_selectable</code>. flag to allow
     * users to add people to an entity with this involvement (set to false to
     * restrict usage, i.e. if involvement is mastered in another system)
     */
    public final TableField<InvolvementKindRecord, Boolean> USER_SELECTABLE = createField(DSL.name("user_selectable"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("TRUE"), SQLDataType.BOOLEAN)), this, "flag to allow users to add people to an entity with this involvement (set to false to restrict usage, i.e. if involvement is mastered in another system)");

    /**
     * The column <code>involvement_kind.subject_kind</code>.
     */
    public final TableField<InvolvementKindRecord, String> SUBJECT_KIND = createField(DSL.name("subject_kind"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>involvement_kind.name</code>.
     */
    public final TableField<InvolvementKindRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>involvement_kind.permitted_role</code>.
     */
    public final TableField<InvolvementKindRecord, String> PERMITTED_ROLE = createField(DSL.name("permitted_role"), SQLDataType.VARCHAR(255), this, "");

    private InvolvementKind(Name alias, Table<InvolvementKindRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InvolvementKind(Name alias, Table<InvolvementKindRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("defines a particular type of involvement a person may have in relation to an entity (e.g. IT Owner for an APPLICATION)"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>involvement_kind</code> table reference
     */
    public InvolvementKind(String alias) {
        this(DSL.name(alias), INVOLVEMENT_KIND);
    }

    /**
     * Create an aliased <code>involvement_kind</code> table reference
     */
    public InvolvementKind(Name alias) {
        this(alias, INVOLVEMENT_KIND);
    }

    /**
     * Create a <code>involvement_kind</code> table reference
     */
    public InvolvementKind() {
        this(DSL.name("involvement_kind"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<InvolvementKindRecord, Long> getIdentity() {
        return (Identity<InvolvementKindRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public InvolvementKind as(String alias) {
        return new InvolvementKind(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public InvolvementKind as(Name alias) {
        return new InvolvementKind(alias, this);
    }

    @Override
    @Nonnull
    public InvolvementKind as(Table<?> alias) {
        return new InvolvementKind(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementKind rename(String name) {
        return new InvolvementKind(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementKind rename(Name name) {
        return new InvolvementKind(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementKind rename(Table<?> name) {
        return new InvolvementKind(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind where(Condition condition) {
        return new InvolvementKind(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementKind where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementKind where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementKind where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementKind where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementKind whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
