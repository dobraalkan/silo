/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IDatabaseUsage;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "database_usage"
)
public record DatabaseUsage(
    @Nullable Long id,
    @Nonnull Long databaseId,
    @Nonnull String entityKind,
    @Nonnull Long entityId,
    @Nonnull String environment,
    @Nullable Timestamp lastUpdatedAt,
    @Nonnull String lastUpdatedBy,
    @Nonnull String provenance
) implements IDatabaseUsage {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>database_usage.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>database_usage.database_id</code>.
     */
    @Column(name = "database_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getDatabaseId() {
        return this.databaseId;
    }

    /**
     * Getter for <code>database_usage.entity_kind</code>.
     */
    @Column(name = "entity_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getEntityKind() {
        return this.entityKind;
    }

    /**
     * Getter for <code>database_usage.entity_id</code>.
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getEntityId() {
        return this.entityId;
    }

    /**
     * Getter for <code>database_usage.environment</code>.
     */
    @Column(name = "environment", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getEnvironment() {
        return this.environment;
    }

    /**
     * Getter for <code>database_usage.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Getter for <code>database_usage.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    /**
     * Getter for <code>database_usage.provenance</code>.
     */
    @Column(name = "provenance", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DatabaseUsage other = (DatabaseUsage) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.databaseId == null) {
            if (other.databaseId != null)
                return false;
        }
        else if (!this.databaseId.equals(other.databaseId))
            return false;
        if (this.entityKind == null) {
            if (other.entityKind != null)
                return false;
        }
        else if (!this.entityKind.equals(other.entityKind))
            return false;
        if (this.entityId == null) {
            if (other.entityId != null)
                return false;
        }
        else if (!this.entityId.equals(other.entityId))
            return false;
        if (this.environment == null) {
            if (other.environment != null)
                return false;
        }
        else if (!this.environment.equals(other.environment))
            return false;
        if (this.lastUpdatedAt == null) {
            if (other.lastUpdatedAt != null)
                return false;
        }
        else if (!this.lastUpdatedAt.equals(other.lastUpdatedAt))
            return false;
        if (this.lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!this.lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.databaseId == null) ? 0 : this.databaseId.hashCode());
        result = prime * result + ((this.entityKind == null) ? 0 : this.entityKind.hashCode());
        result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
        result = prime * result + ((this.environment == null) ? 0 : this.environment.hashCode());
        result = prime * result + ((this.lastUpdatedAt == null) ? 0 : this.lastUpdatedAt.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DatabaseUsage (");

        sb.append(id);
        sb.append(", ").append(databaseId);
        sb.append(", ").append(entityKind);
        sb.append(", ").append(entityId);
        sb.append(", ").append(environment);
        sb.append(", ").append(lastUpdatedAt);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(provenance);

        sb.append(")");
        return sb.toString();
    }
}
