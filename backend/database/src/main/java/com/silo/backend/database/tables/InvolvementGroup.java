/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.InvolvementGroupRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * collection of involvement kinds
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvolvementGroup extends TableImpl<InvolvementGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>involvement_group</code>
     */
    public static final InvolvementGroup INVOLVEMENT_GROUP = new InvolvementGroup();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<InvolvementGroupRecord> getRecordType() {
        return InvolvementGroupRecord.class;
    }

    /**
     * The column <code>involvement_group.id</code>. unique identifier for this
     * involvement group within waltz
     */
    public final TableField<InvolvementGroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "unique identifier for this involvement group within waltz");

    /**
     * The column <code>involvement_group.name</code>. name of this involvement
     * group
     */
    public final TableField<InvolvementGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "name of this involvement group");

    /**
     * The column <code>involvement_group.external_id</code>. external
     * identifier for this involvement group
     */
    public final TableField<InvolvementGroupRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200).nullable(false), this, "external identifier for this involvement group");

    /**
     * The column <code>involvement_group.provenance</code>. origination of this
     * involvement group
     */
    public final TableField<InvolvementGroupRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false), this, "origination of this involvement group");

    private InvolvementGroup(Name alias, Table<InvolvementGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InvolvementGroup(Name alias, Table<InvolvementGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("collection of involvement kinds"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>involvement_group</code> table reference
     */
    public InvolvementGroup(String alias) {
        this(DSL.name(alias), INVOLVEMENT_GROUP);
    }

    /**
     * Create an aliased <code>involvement_group</code> table reference
     */
    public InvolvementGroup(Name alias) {
        this(alias, INVOLVEMENT_GROUP);
    }

    /**
     * Create a <code>involvement_group</code> table reference
     */
    public InvolvementGroup() {
        this(DSL.name("involvement_group"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<InvolvementGroupRecord, Long> getIdentity() {
        return (Identity<InvolvementGroupRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public InvolvementGroup as(String alias) {
        return new InvolvementGroup(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public InvolvementGroup as(Name alias) {
        return new InvolvementGroup(alias, this);
    }

    @Override
    @Nonnull
    public InvolvementGroup as(Table<?> alias) {
        return new InvolvementGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroup rename(String name) {
        return new InvolvementGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroup rename(Name name) {
        return new InvolvementGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InvolvementGroup rename(Table<?> name) {
        return new InvolvementGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup where(Condition condition) {
        return new InvolvementGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public InvolvementGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public InvolvementGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
