/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IPersonHierarchy;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "person_hierarchy"
)
public record PersonHierarchy(
    @Nonnull String managerId,
    @Nonnull String employeeId,
    @Nullable Integer level
) implements IPersonHierarchy {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>person_hierarchy.manager_id</code>.
     */
    @Column(name = "manager_id", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getManagerId() {
        return this.managerId;
    }

    /**
     * Getter for <code>person_hierarchy.employee_id</code>.
     */
    @Column(name = "employee_id", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Getter for <code>person_hierarchy.level</code>.
     */
    @Column(name = "level")
    @Nullable
    @Override
    public Integer getLevel() {
        return this.level;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PersonHierarchy other = (PersonHierarchy) obj;
        if (this.managerId == null) {
            if (other.managerId != null)
                return false;
        }
        else if (!this.managerId.equals(other.managerId))
            return false;
        if (this.employeeId == null) {
            if (other.employeeId != null)
                return false;
        }
        else if (!this.employeeId.equals(other.employeeId))
            return false;
        if (this.level == null) {
            if (other.level != null)
                return false;
        }
        else if (!this.level.equals(other.level))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.managerId == null) ? 0 : this.managerId.hashCode());
        result = prime * result + ((this.employeeId == null) ? 0 : this.employeeId.hashCode());
        result = prime * result + ((this.level == null) ? 0 : this.level.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PersonHierarchy (");

        sb.append(managerId);
        sb.append(", ").append(employeeId);
        sb.append(", ").append(level);

        sb.append(")");
        return sb.toString();
    }
}
