/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.interfaces;


import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;


/**
 * represents an application (with an entity_kind of 'APPLICATION')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "application"
)
public interface IApplication extends Serializable {

    /**
     * Getter for <code>application.id</code>.
     */
    @Column(name = "id")
    @Nullable
    public Long getId();

    /**
     * Getter for <code>application.name</code>. name of this application
     * (aliases can be added in the entity_alias table)
     */
    @Column(name = "name", length = 255)
    @Size(max = 255)
    @Nullable
    public String getName();

    /**
     * Getter for <code>application.description</code>. longer description to
     * provide more information about this application.  Markdown is supported
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    public String getDescription();

    /**
     * Getter for <code>application.asset_code</code>. external identifier
     * representing this application
     */
    @Column(name = "asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    public String getAssetCode();

    /**
     * Getter for <code>application.created_at</code>.
     */
    @Column(name = "created_at", precision = 6)
    @Nullable
    public Timestamp getCreatedAt();

    /**
     * Getter for <code>application.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    public Timestamp getUpdatedAt();

    /**
     * Getter for <code>application.organisational_unit_id</code>. reference to
     * the owning org unit
     */
    @Column(name = "organisational_unit_id", nullable = false)
    @NotNull
    @Nonnull
    public Long getOrganisationalUnitId();

    /**
     * Getter for <code>application.kind</code>. broad category of this
     * application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)
     */
    @Column(name = "kind", length = 128)
    @Size(max = 128)
    @Nullable
    public String getKind();

    /**
     * Getter for <code>application.lifecycle_phase</code>. the current
     * application lifecycle state of this application (one of: CONCEPTUAL,
     * DEVELOPMENT, PRODUCTION, RETIRED)
     */
    @Column(name = "lifecycle_phase", length = 128)
    @Size(max = 128)
    @Nullable
    public String getLifecyclePhase();

    /**
     * Getter for <code>application.parent_asset_code</code>. asset code of any
     * parent application
     */
    @Column(name = "parent_asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    public String getParentAssetCode();

    /**
     * Getter for <code>application.overall_rating</code>. investment rating
     * scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain,
     * Invest, Unknown)
     */
    @Column(name = "overall_rating", length = 1)
    @Size(max = 1)
    @Nullable
    public String getOverallRating();

    /**
     * Getter for <code>application.provenance</code>. origination of this
     * application record.  Will be 'waltz' if entered via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    public String getProvenance();

    /**
     * Getter for <code>application.business_criticality</code>. business
     * criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH,
     * NONE, UNKNOWN)
     */
    @Column(name = "business_criticality", length = 128)
    @Size(max = 128)
    @Nullable
    public String getBusinessCriticality();

    /**
     * Getter for <code>application.is_removed</code>. should this record
     * logically be treated as if it has been physically deleted
     */
    @Column(name = "is_removed")
    @Nullable
    public Boolean getIsRemoved();

    /**
     * Getter for <code>application.entity_lifecycle_status</code>. the
     * lifecycle state of this entity record, slightly different from is_removed
     * as does not imply the record is 'gone'  (one of: ACTIVE, PENDING,
     * REMOVED)
     */
    @Column(name = "entity_lifecycle_status", length = 64)
    @Size(max = 64)
    @Nullable
    public String getEntityLifecycleStatus();

    /**
     * Getter for <code>application.planned_retirement_date</code>. date when
     * this application is (or was) planning to retire
     */
    @Column(name = "planned_retirement_date", precision = 6)
    @Nullable
    public Timestamp getPlannedRetirementDate();

    /**
     * Getter for <code>application.actual_retirement_date</code>. date when
     * this application actually retired from production, null if not planned
     */
    @Column(name = "actual_retirement_date", precision = 6)
    @Nullable
    public Timestamp getActualRetirementDate();

    /**
     * Getter for <code>application.commission_date</code>. when was this
     * application commissioned, null if unknown
     */
    @Column(name = "commission_date", precision = 6)
    @Nullable
    public Timestamp getCommissionDate();
}
