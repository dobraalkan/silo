/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ApplicationGroupEntryRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * a reference to a specific application in a group
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicationGroupEntry extends TableImpl<ApplicationGroupEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>application_group_entry</code>
     */
    public static final ApplicationGroupEntry APPLICATION_GROUP_ENTRY = new ApplicationGroupEntry();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ApplicationGroupEntryRecord> getRecordType() {
        return ApplicationGroupEntryRecord.class;
    }

    /**
     * The column <code>application_group_entry.group_id</code>. reference to
     * the group this entry belongs to
     */
    public final TableField<ApplicationGroupEntryRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "reference to the group this entry belongs to");

    /**
     * The column <code>application_group_entry.application_id</code>. reference
     * to the application this entry refers to
     */
    public final TableField<ApplicationGroupEntryRecord, Long> APPLICATION_ID = createField(DSL.name("application_id"), SQLDataType.BIGINT.nullable(false), this, "reference to the application this entry refers to");

    /**
     * The column <code>application_group_entry.is_readonly</code>. flag to
     * indicate that the value is readonly.  Typically set if group entries are
     * added by external jobs
     */
    public final TableField<ApplicationGroupEntryRecord, Boolean> IS_READONLY = createField(DSL.name("is_readonly"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "flag to indicate that the value is readonly.  Typically set if group entries are added by external jobs");

    /**
     * The column <code>application_group_entry.provenance</code>. indicates
     * where this record originated. Will be 'waltz' if created via the UI
     */
    public final TableField<ApplicationGroupEntryRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "indicates where this record originated. Will be 'waltz' if created via the UI");

    /**
     * The column <code>application_group_entry.created_at</code>. the date this
     * entry was created, sometimes used to 'age' entries out the group, i.e. in
     * exception lists
     */
    public final TableField<ApplicationGroupEntryRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "the date this entry was created, sometimes used to 'age' entries out the group, i.e. in exception lists");

    private ApplicationGroupEntry(Name alias, Table<ApplicationGroupEntryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApplicationGroupEntry(Name alias, Table<ApplicationGroupEntryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("a reference to a specific application in a group"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>application_group_entry</code> table reference
     */
    public ApplicationGroupEntry(String alias) {
        this(DSL.name(alias), APPLICATION_GROUP_ENTRY);
    }

    /**
     * Create an aliased <code>application_group_entry</code> table reference
     */
    public ApplicationGroupEntry(Name alias) {
        this(alias, APPLICATION_GROUP_ENTRY);
    }

    /**
     * Create a <code>application_group_entry</code> table reference
     */
    public ApplicationGroupEntry() {
        this(DSL.name("application_group_entry"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public ApplicationGroupEntry as(String alias) {
        return new ApplicationGroupEntry(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ApplicationGroupEntry as(Name alias) {
        return new ApplicationGroupEntry(alias, this);
    }

    @Override
    @Nonnull
    public ApplicationGroupEntry as(Table<?> alias) {
        return new ApplicationGroupEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry rename(String name) {
        return new ApplicationGroupEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry rename(Name name) {
        return new ApplicationGroupEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry rename(Table<?> name) {
        return new ApplicationGroupEntry(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry where(Condition condition) {
        return new ApplicationGroupEntry(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupEntry where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupEntry where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupEntry where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupEntry where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupEntry whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
