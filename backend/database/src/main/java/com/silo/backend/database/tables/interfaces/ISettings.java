/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.interfaces;


import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;

import javax.annotation.processing.Generated;


/**
 * contains configuration data which controls the operation of Waltz.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "settings"
)
public interface ISettings extends Serializable {

    /**
     * Getter for <code>settings.name</code>. the key name of the setting, often
     * uses dotted notation.  Strongly recommended to put client specific
     * settings under their own namespace (i.e. mycorp.somesetting)
     */
    @Column(name = "name", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    public String getName();

    /**
     * Getter for <code>settings.value</code>. the value of the setting, if the
     * setting is a boolean it should be entered as lowercase
     */
    @Column(name = "value", length = 4000)
    @Size(max = 4000)
    @Nullable
    public String getValue();

    /**
     * Getter for <code>settings.restricted</code>. restricted settings are
     * internal to Waltz and not available via API/external calls
     */
    @Column(name = "restricted")
    @Nullable
    public Boolean getRestricted();

    /**
     * Getter for <code>settings.description</code>. optional comment to
     * describe this setting
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    public String getDescription();
}
