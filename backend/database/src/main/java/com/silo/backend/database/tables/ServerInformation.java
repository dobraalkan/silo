/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ServerInformationRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Date;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ServerInformation extends TableImpl<ServerInformationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>server_information</code>
     */
    public static final ServerInformation SERVER_INFORMATION = new ServerInformation();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ServerInformationRecord> getRecordType() {
        return ServerInformationRecord.class;
    }

    /**
     * The column <code>server_information.id</code>.
     */
    public final TableField<ServerInformationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>server_information.hostname</code>.
     */
    public final TableField<ServerInformationRecord, String> HOSTNAME = createField(DSL.name("hostname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>server_information.operating_system</code>.
     */
    public final TableField<ServerInformationRecord, String> OPERATING_SYSTEM = createField(DSL.name("operating_system"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>server_information.location</code>.
     */
    public final TableField<ServerInformationRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>server_information.operating_system_version</code>.
     */
    public final TableField<ServerInformationRecord, String> OPERATING_SYSTEM_VERSION = createField(DSL.name("operating_system_version"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>server_information.country</code>.
     */
    public final TableField<ServerInformationRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>server_information.is_virtual</code>.
     */
    public final TableField<ServerInformationRecord, Boolean> IS_VIRTUAL = createField(DSL.name("is_virtual"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>server_information.provenance</code>.
     */
    public final TableField<ServerInformationRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>server_information.os_end_of_life_date</code>.
     */
    public final TableField<ServerInformationRecord, Date> OS_END_OF_LIFE_DATE = createField(DSL.name("os_end_of_life_date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>server_information.hw_end_of_life_date</code>.
     */
    public final TableField<ServerInformationRecord, Date> HW_END_OF_LIFE_DATE = createField(DSL.name("hw_end_of_life_date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>server_information.lifecycle_status</code>.
     */
    public final TableField<ServerInformationRecord, String> LIFECYCLE_STATUS = createField(DSL.name("lifecycle_status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>server_information.external_id</code>.
     */
    public final TableField<ServerInformationRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(200), this, "");

    private ServerInformation(Name alias, Table<ServerInformationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerInformation(Name alias, Table<ServerInformationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>server_information</code> table reference
     */
    public ServerInformation(String alias) {
        this(DSL.name(alias), SERVER_INFORMATION);
    }

    /**
     * Create an aliased <code>server_information</code> table reference
     */
    public ServerInformation(Name alias) {
        this(alias, SERVER_INFORMATION);
    }

    /**
     * Create a <code>server_information</code> table reference
     */
    public ServerInformation() {
        this(DSL.name("server_information"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<ServerInformationRecord, Long> getIdentity() {
        return (Identity<ServerInformationRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public ServerInformation as(String alias) {
        return new ServerInformation(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ServerInformation as(Name alias) {
        return new ServerInformation(alias, this);
    }

    @Override
    @Nonnull
    public ServerInformation as(Table<?> alias) {
        return new ServerInformation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerInformation rename(String name) {
        return new ServerInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerInformation rename(Name name) {
        return new ServerInformation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerInformation rename(Table<?> name) {
        return new ServerInformation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation where(Condition condition) {
        return new ServerInformation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerInformation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerInformation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerInformation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerInformation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerInformation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
