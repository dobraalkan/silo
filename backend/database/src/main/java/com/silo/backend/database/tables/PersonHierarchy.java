/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.PersonHierarchyRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PersonHierarchy extends TableImpl<PersonHierarchyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>person_hierarchy</code>
     */
    public static final PersonHierarchy PERSON_HIERARCHY = new PersonHierarchy();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PersonHierarchyRecord> getRecordType() {
        return PersonHierarchyRecord.class;
    }

    /**
     * The column <code>person_hierarchy.manager_id</code>.
     */
    public final TableField<PersonHierarchyRecord, String> MANAGER_ID = createField(DSL.name("manager_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>person_hierarchy.employee_id</code>.
     */
    public final TableField<PersonHierarchyRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>person_hierarchy.level</code>.
     */
    public final TableField<PersonHierarchyRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("99"), SQLDataType.INTEGER)), this, "");

    private PersonHierarchy(Name alias, Table<PersonHierarchyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PersonHierarchy(Name alias, Table<PersonHierarchyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>person_hierarchy</code> table reference
     */
    public PersonHierarchy(String alias) {
        this(DSL.name(alias), PERSON_HIERARCHY);
    }

    /**
     * Create an aliased <code>person_hierarchy</code> table reference
     */
    public PersonHierarchy(Name alias) {
        this(alias, PERSON_HIERARCHY);
    }

    /**
     * Create a <code>person_hierarchy</code> table reference
     */
    public PersonHierarchy() {
        this(DSL.name("person_hierarchy"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public PersonHierarchy as(String alias) {
        return new PersonHierarchy(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PersonHierarchy as(Name alias) {
        return new PersonHierarchy(alias, this);
    }

    @Override
    @Nonnull
    public PersonHierarchy as(Table<?> alias) {
        return new PersonHierarchy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PersonHierarchy rename(String name) {
        return new PersonHierarchy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PersonHierarchy rename(Name name) {
        return new PersonHierarchy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PersonHierarchy rename(Table<?> name) {
        return new PersonHierarchy(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy where(Condition condition) {
        return new PersonHierarchy(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PersonHierarchy where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PersonHierarchy where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PersonHierarchy where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PersonHierarchy where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PersonHierarchy whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
