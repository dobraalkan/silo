/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IRelationshipKind;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * Describes types of relationships between entities
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "relationship_kind"
)
public record RelationshipKind(
    @Nullable Long id,
    @Nonnull String name,
    @Nullable String description,
    @Nonnull String kindA,
    @Nonnull String kindB,
    @Nullable Long categoryA,
    @Nullable Long categoryB,
    @Nullable Boolean isReadonly,
    @Nonnull String code,
    @Nullable Integer position,
    @Nonnull String reverseName
) implements IRelationshipKind {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>relationship_kind.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>relationship_kind.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>relationship_kind.description</code>.
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>relationship_kind.kind_a</code>.
     */
    @Column(name = "kind_a", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getKindA() {
        return this.kindA;
    }

    /**
     * Getter for <code>relationship_kind.kind_b</code>.
     */
    @Column(name = "kind_b", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getKindB() {
        return this.kindB;
    }

    /**
     * Getter for <code>relationship_kind.category_a</code>. Placeholder: if
     * kind_a is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_a")
    @Nullable
    @Override
    public Long getCategoryA() {
        return this.categoryA;
    }

    /**
     * Getter for <code>relationship_kind.category_b</code>. Placeholder: if
     * kind_b is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_b")
    @Nullable
    @Override
    public Long getCategoryB() {
        return this.categoryB;
    }

    /**
     * Getter for <code>relationship_kind.is_readonly</code>.
     */
    @Column(name = "is_readonly")
    @Nullable
    @Override
    public Boolean getIsReadonly() {
        return this.isReadonly;
    }

    /**
     * Getter for <code>relationship_kind.code</code>.
     */
    @Column(name = "code", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Getter for <code>relationship_kind.position</code>.
     */
    @Column(name = "position")
    @Nullable
    @Override
    public Integer getPosition() {
        return this.position;
    }

    /**
     * Getter for <code>relationship_kind.reverse_name</code>.
     */
    @Column(name = "reverse_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getReverseName() {
        return this.reverseName;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RelationshipKind other = (RelationshipKind) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.kindA == null) {
            if (other.kindA != null)
                return false;
        }
        else if (!this.kindA.equals(other.kindA))
            return false;
        if (this.kindB == null) {
            if (other.kindB != null)
                return false;
        }
        else if (!this.kindB.equals(other.kindB))
            return false;
        if (this.categoryA == null) {
            if (other.categoryA != null)
                return false;
        }
        else if (!this.categoryA.equals(other.categoryA))
            return false;
        if (this.categoryB == null) {
            if (other.categoryB != null)
                return false;
        }
        else if (!this.categoryB.equals(other.categoryB))
            return false;
        if (this.isReadonly == null) {
            if (other.isReadonly != null)
                return false;
        }
        else if (!this.isReadonly.equals(other.isReadonly))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.position == null) {
            if (other.position != null)
                return false;
        }
        else if (!this.position.equals(other.position))
            return false;
        if (this.reverseName == null) {
            if (other.reverseName != null)
                return false;
        }
        else if (!this.reverseName.equals(other.reverseName))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.kindA == null) ? 0 : this.kindA.hashCode());
        result = prime * result + ((this.kindB == null) ? 0 : this.kindB.hashCode());
        result = prime * result + ((this.categoryA == null) ? 0 : this.categoryA.hashCode());
        result = prime * result + ((this.categoryB == null) ? 0 : this.categoryB.hashCode());
        result = prime * result + ((this.isReadonly == null) ? 0 : this.isReadonly.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.position == null) ? 0 : this.position.hashCode());
        result = prime * result + ((this.reverseName == null) ? 0 : this.reverseName.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RelationshipKind (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(description);
        sb.append(", ").append(kindA);
        sb.append(", ").append(kindB);
        sb.append(", ").append(categoryA);
        sb.append(", ").append(categoryB);
        sb.append(", ").append(isReadonly);
        sb.append(", ").append(code);
        sb.append(", ").append(position);
        sb.append(", ").append(reverseName);

        sb.append(")");
        return sb.toString();
    }
}
