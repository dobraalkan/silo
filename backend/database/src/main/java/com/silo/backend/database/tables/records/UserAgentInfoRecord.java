/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.UserAgentInfo;
import com.silo.backend.database.tables.interfaces.IUserAgentInfo;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_agent_info"
)
public class UserAgentInfoRecord extends TableRecordImpl<UserAgentInfoRecord> implements IUserAgentInfo {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user_agent_info.id</code>.
     */
    public UserAgentInfoRecord setId(@Nullable Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>user_agent_info.user_name</code>.
     */
    public UserAgentInfoRecord setUserName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.user_name</code>.
     */
    @Column(name = "user_name", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>user_agent_info.user_agent</code>.
     */
    public UserAgentInfoRecord setUserAgent(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.user_agent</code>.
     */
    @Column(name = "user_agent", nullable = false, length = 500)
    @NotNull
    @Size(max = 500)
    @Nonnull
    @Override
    public String getUserAgent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>user_agent_info.resolution</code>.
     */
    public UserAgentInfoRecord setResolution(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.resolution</code>.
     */
    @Column(name = "resolution", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getResolution() {
        return (String) get(3);
    }

    /**
     * Setter for <code>user_agent_info.operating_system</code>.
     */
    public UserAgentInfoRecord setOperatingSystem(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.operating_system</code>.
     */
    @Column(name = "operating_system", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getOperatingSystem() {
        return (String) get(4);
    }

    /**
     * Setter for <code>user_agent_info.ip_address</code>.
     */
    public UserAgentInfoRecord setIpAddress(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.ip_address</code>.
     */
    @Column(name = "ip_address", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getIpAddress() {
        return (String) get(5);
    }

    /**
     * Setter for <code>user_agent_info.login_timestamp</code>.
     */
    public UserAgentInfoRecord setLoginTimestamp(@Nonnull Timestamp value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>user_agent_info.login_timestamp</code>.
     */
    @Column(name = "login_timestamp", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    @Override
    public Timestamp getLoginTimestamp() {
        return (Timestamp) get(6);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IUserAgentInfo from) {
        setId(from.getId());
        setUserName(from.getUserName());
        setUserAgent(from.getUserAgent());
        setResolution(from.getResolution());
        setOperatingSystem(from.getOperatingSystem());
        setIpAddress(from.getIpAddress());
        setLoginTimestamp(from.getLoginTimestamp());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserAgentInfoRecord
     */
    public UserAgentInfoRecord() {
        super(UserAgentInfo.USER_AGENT_INFO);
    }

    /**
     * Create a detached, initialised UserAgentInfoRecord
     */
    @ConstructorProperties({ "id", "userName", "userAgent", "resolution", "operatingSystem", "ipAddress", "loginTimestamp" })
    public UserAgentInfoRecord(@Nullable Integer id, @Nonnull String userName, @Nonnull String userAgent, @Nonnull String resolution, @Nonnull String operatingSystem, @Nonnull String ipAddress, @Nonnull Timestamp loginTimestamp) {
        super(UserAgentInfo.USER_AGENT_INFO);

        setId(id);
        setUserName(userName);
        setUserAgent(userAgent);
        setResolution(resolution);
        setOperatingSystem(operatingSystem);
        setIpAddress(ipAddress);
        setLoginTimestamp(loginTimestamp);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserAgentInfoRecord
     */
    public UserAgentInfoRecord(com.silo.backend.database.tables.pojos.UserAgentInfo value) {
        super(UserAgentInfo.USER_AGENT_INFO);

        if (value != null) {
            setId(value.id());
            setUserName(value.userName());
            setUserAgent(value.userAgent());
            setResolution(value.resolution());
            setOperatingSystem(value.operatingSystem());
            setIpAddress(value.ipAddress());
            setLoginTimestamp(value.loginTimestamp());
            resetChangedOnNotNull();
        }
    }
}
