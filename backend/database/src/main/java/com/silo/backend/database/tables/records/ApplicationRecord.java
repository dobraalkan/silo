/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.Application;
import com.silo.backend.database.tables.interfaces.IApplication;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * represents an application (with an entity_kind of 'APPLICATION')
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "application"
)
public class ApplicationRecord extends TableRecordImpl<ApplicationRecord> implements IApplication {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>application.id</code>.
     */
    public ApplicationRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>application.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>application.name</code>. name of this application
     * (aliases can be added in the entity_alias table)
     */
    public ApplicationRecord setName(@Nullable String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>application.name</code>. name of this application
     * (aliases can be added in the entity_alias table)
     */
    @Column(name = "name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>application.description</code>. longer description to
     * provide more information about this application.  Markdown is supported
     */
    public ApplicationRecord setDescription(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>application.description</code>. longer description to
     * provide more information about this application.  Markdown is supported
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>application.asset_code</code>. external identifier
     * representing this application
     */
    public ApplicationRecord setAssetCode(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>application.asset_code</code>. external identifier
     * representing this application
     */
    @Column(name = "asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getAssetCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>application.created_at</code>.
     */
    public ApplicationRecord setCreatedAt(@Nullable Timestamp value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>application.created_at</code>.
     */
    @Column(name = "created_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getCreatedAt() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>application.updated_at</code>.
     */
    public ApplicationRecord setUpdatedAt(@Nonnull Timestamp value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>application.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    @Nonnull
    @Override
    public Timestamp getUpdatedAt() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>application.organisational_unit_id</code>. reference to
     * the owning org unit
     */
    public ApplicationRecord setOrganisationalUnitId(@Nonnull Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>application.organisational_unit_id</code>. reference to
     * the owning org unit
     */
    @Column(name = "organisational_unit_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getOrganisationalUnitId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>application.kind</code>. broad category of this
     * application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)
     */
    public ApplicationRecord setKind(@Nullable String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>application.kind</code>. broad category of this
     * application (e.g. IN_HOUSE, EXTERNALLY_HOSTED, THIRD_PARTY, EUC, etc)
     */
    @Column(name = "kind", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getKind() {
        return (String) get(7);
    }

    /**
     * Setter for <code>application.lifecycle_phase</code>. the current
     * application lifecycle state of this application (one of: CONCEPTUAL,
     * DEVELOPMENT, PRODUCTION, RETIRED)
     */
    public ApplicationRecord setLifecyclePhase(@Nullable String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>application.lifecycle_phase</code>. the current
     * application lifecycle state of this application (one of: CONCEPTUAL,
     * DEVELOPMENT, PRODUCTION, RETIRED)
     */
    @Column(name = "lifecycle_phase", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getLifecyclePhase() {
        return (String) get(8);
    }

    /**
     * Setter for <code>application.parent_asset_code</code>. asset code of any
     * parent application
     */
    public ApplicationRecord setParentAssetCode(@Nullable String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>application.parent_asset_code</code>. asset code of any
     * parent application
     */
    @Column(name = "parent_asset_code", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getParentAssetCode() {
        return (String) get(9);
    }

    /**
     * Setter for <code>application.overall_rating</code>. investment rating
     * scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain,
     * Invest, Unknown)
     */
    public ApplicationRecord setOverallRating(@Nullable String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>application.overall_rating</code>. investment rating
     * scheme (one of: R, A, G, Z / which equates to Disinvest, Maintain,
     * Invest, Unknown)
     */
    @Column(name = "overall_rating", length = 1)
    @Size(max = 1)
    @Nullable
    @Override
    public String getOverallRating() {
        return (String) get(10);
    }

    /**
     * Setter for <code>application.provenance</code>. origination of this
     * application record.  Will be 'waltz' if entered via the UI
     */
    public ApplicationRecord setProvenance(@Nullable String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>application.provenance</code>. origination of this
     * application record.  Will be 'waltz' if entered via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(11);
    }

    /**
     * Setter for <code>application.business_criticality</code>. business
     * criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH,
     * NONE, UNKNOWN)
     */
    public ApplicationRecord setBusinessCriticality(@Nullable String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>application.business_criticality</code>. business
     * criticality of this application (one of: LOW, MEDIUM, HIGH, VERY_HIGH,
     * NONE, UNKNOWN)
     */
    @Column(name = "business_criticality", length = 128)
    @Size(max = 128)
    @Nullable
    @Override
    public String getBusinessCriticality() {
        return (String) get(12);
    }

    /**
     * Setter for <code>application.is_removed</code>. should this record
     * logically be treated as if it has been physically deleted
     */
    public ApplicationRecord setIsRemoved(@Nullable Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>application.is_removed</code>. should this record
     * logically be treated as if it has been physically deleted
     */
    @Column(name = "is_removed")
    @Nullable
    @Override
    public Boolean getIsRemoved() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>application.entity_lifecycle_status</code>. the
     * lifecycle state of this entity record, slightly different from is_removed
     * as does not imply the record is 'gone'  (one of: ACTIVE, PENDING,
     * REMOVED)
     */
    public ApplicationRecord setEntityLifecycleStatus(@Nullable String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>application.entity_lifecycle_status</code>. the
     * lifecycle state of this entity record, slightly different from is_removed
     * as does not imply the record is 'gone'  (one of: ACTIVE, PENDING,
     * REMOVED)
     */
    @Column(name = "entity_lifecycle_status", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getEntityLifecycleStatus() {
        return (String) get(14);
    }

    /**
     * Setter for <code>application.planned_retirement_date</code>. date when
     * this application is (or was) planning to retire
     */
    public ApplicationRecord setPlannedRetirementDate(@Nullable Timestamp value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>application.planned_retirement_date</code>. date when
     * this application is (or was) planning to retire
     */
    @Column(name = "planned_retirement_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getPlannedRetirementDate() {
        return (Timestamp) get(15);
    }

    /**
     * Setter for <code>application.actual_retirement_date</code>. date when
     * this application actually retired from production, null if not planned
     */
    public ApplicationRecord setActualRetirementDate(@Nullable Timestamp value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>application.actual_retirement_date</code>. date when
     * this application actually retired from production, null if not planned
     */
    @Column(name = "actual_retirement_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getActualRetirementDate() {
        return (Timestamp) get(16);
    }

    /**
     * Setter for <code>application.commission_date</code>. when was this
     * application commissioned, null if unknown
     */
    public ApplicationRecord setCommissionDate(@Nullable Timestamp value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>application.commission_date</code>. when was this
     * application commissioned, null if unknown
     */
    @Column(name = "commission_date", precision = 6)
    @Nullable
    @Override
    public Timestamp getCommissionDate() {
        return (Timestamp) get(17);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IApplication from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
        setAssetCode(from.getAssetCode());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
        setOrganisationalUnitId(from.getOrganisationalUnitId());
        setKind(from.getKind());
        setLifecyclePhase(from.getLifecyclePhase());
        setParentAssetCode(from.getParentAssetCode());
        setOverallRating(from.getOverallRating());
        setProvenance(from.getProvenance());
        setBusinessCriticality(from.getBusinessCriticality());
        setIsRemoved(from.getIsRemoved());
        setEntityLifecycleStatus(from.getEntityLifecycleStatus());
        setPlannedRetirementDate(from.getPlannedRetirementDate());
        setActualRetirementDate(from.getActualRetirementDate());
        setCommissionDate(from.getCommissionDate());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ApplicationRecord
     */
    public ApplicationRecord() {
        super(Application.APPLICATION);
    }

    /**
     * Create a detached, initialised ApplicationRecord
     */
    @ConstructorProperties({ "id", "name", "description", "assetCode", "createdAt", "updatedAt", "organisationalUnitId", "kind", "lifecyclePhase", "parentAssetCode", "overallRating", "provenance", "businessCriticality", "isRemoved", "entityLifecycleStatus", "plannedRetirementDate", "actualRetirementDate", "commissionDate" })
    public ApplicationRecord(@Nullable Long id, @Nullable String name, @Nullable String description, @Nullable String assetCode, @Nullable Timestamp createdAt, @Nonnull Timestamp updatedAt, @Nonnull Long organisationalUnitId, @Nullable String kind, @Nullable String lifecyclePhase, @Nullable String parentAssetCode, @Nullable String overallRating, @Nullable String provenance, @Nullable String businessCriticality, @Nullable Boolean isRemoved, @Nullable String entityLifecycleStatus, @Nullable Timestamp plannedRetirementDate, @Nullable Timestamp actualRetirementDate, @Nullable Timestamp commissionDate) {
        super(Application.APPLICATION);

        setId(id);
        setName(name);
        setDescription(description);
        setAssetCode(assetCode);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setOrganisationalUnitId(organisationalUnitId);
        setKind(kind);
        setLifecyclePhase(lifecyclePhase);
        setParentAssetCode(parentAssetCode);
        setOverallRating(overallRating);
        setProvenance(provenance);
        setBusinessCriticality(businessCriticality);
        setIsRemoved(isRemoved);
        setEntityLifecycleStatus(entityLifecycleStatus);
        setPlannedRetirementDate(plannedRetirementDate);
        setActualRetirementDate(actualRetirementDate);
        setCommissionDate(commissionDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ApplicationRecord
     */
    public ApplicationRecord(com.silo.backend.database.tables.pojos.Application value) {
        super(Application.APPLICATION);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setDescription(value.description());
            setAssetCode(value.assetCode());
            setCreatedAt(value.createdAt());
            setUpdatedAt(value.updatedAt());
            setOrganisationalUnitId(value.organisationalUnitId());
            setKind(value.kind());
            setLifecyclePhase(value.lifecyclePhase());
            setParentAssetCode(value.parentAssetCode());
            setOverallRating(value.overallRating());
            setProvenance(value.provenance());
            setBusinessCriticality(value.businessCriticality());
            setIsRemoved(value.isRemoved());
            setEntityLifecycleStatus(value.entityLifecycleStatus());
            setPlannedRetirementDate(value.plannedRetirementDate());
            setActualRetirementDate(value.actualRetirementDate());
            setCommissionDate(value.commissionDate());
            resetChangedOnNotNull();
        }
    }
}
