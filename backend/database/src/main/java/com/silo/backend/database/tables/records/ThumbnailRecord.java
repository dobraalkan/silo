/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.Thumbnail;
import com.silo.backend.database.tables.interfaces.IThumbnail;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "thumbnail"
)
public class ThumbnailRecord extends TableRecordImpl<ThumbnailRecord> implements IThumbnail {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>thumbnail.parent_entity_kind</code>.
     */
    public ThumbnailRecord setParentEntityKind(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.parent_entity_kind</code>.
     */
    @Column(name = "parent_entity_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getParentEntityKind() {
        return (String) get(0);
    }

    /**
     * Setter for <code>thumbnail.parent_entity_id</code>.
     */
    public ThumbnailRecord setParentEntityId(@Nonnull Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.parent_entity_id</code>.
     */
    @Column(name = "parent_entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getParentEntityId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>thumbnail.last_updated_at</code>.
     */
    public ThumbnailRecord setLastUpdatedAt(@Nullable Timestamp value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>thumbnail.last_updated_by</code>.
     */
    public ThumbnailRecord setLastUpdatedBy(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>thumbnail.mime_type</code>.
     */
    public ThumbnailRecord setMimeType(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.mime_type</code>.
     */
    @Column(name = "mime_type", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getMimeType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>thumbnail.blob</code>.
     */
    public ThumbnailRecord setBlob(@Nonnull byte[] value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.blob</code>.
     */
    @Column(name = "blob", nullable = false, length = 1000000000)
    @NotNull
    @Size(max = 1000000000)
    @Nonnull
    @Override
    public byte[] getBlob() {
        return (byte[]) get(5);
    }

    /**
     * Setter for <code>thumbnail.external_id</code>.
     */
    public ThumbnailRecord setExternalId(@Nullable String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.external_id</code>.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>thumbnail.provenance</code>.
     */
    public ThumbnailRecord setProvenance(@Nonnull String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>thumbnail.provenance</code>.
     */
    @Column(name = "provenance", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getProvenance() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IThumbnail from) {
        setParentEntityKind(from.getParentEntityKind());
        setParentEntityId(from.getParentEntityId());
        setLastUpdatedAt(from.getLastUpdatedAt());
        setLastUpdatedBy(from.getLastUpdatedBy());
        setMimeType(from.getMimeType());
        setBlob(from.getBlob());
        setExternalId(from.getExternalId());
        setProvenance(from.getProvenance());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ThumbnailRecord
     */
    public ThumbnailRecord() {
        super(Thumbnail.THUMBNAIL);
    }

    /**
     * Create a detached, initialised ThumbnailRecord
     */
    @ConstructorProperties({ "parentEntityKind", "parentEntityId", "lastUpdatedAt", "lastUpdatedBy", "mimeType", "blob", "externalId", "provenance" })
    public ThumbnailRecord(@Nonnull String parentEntityKind, @Nonnull Long parentEntityId, @Nullable Timestamp lastUpdatedAt, @Nonnull String lastUpdatedBy, @Nonnull String mimeType, @Nonnull byte[] blob, @Nullable String externalId, @Nonnull String provenance) {
        super(Thumbnail.THUMBNAIL);

        setParentEntityKind(parentEntityKind);
        setParentEntityId(parentEntityId);
        setLastUpdatedAt(lastUpdatedAt);
        setLastUpdatedBy(lastUpdatedBy);
        setMimeType(mimeType);
        setBlob(blob);
        setExternalId(externalId);
        setProvenance(provenance);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ThumbnailRecord
     */
    public ThumbnailRecord(com.silo.backend.database.tables.pojos.Thumbnail value) {
        super(Thumbnail.THUMBNAIL);

        if (value != null) {
            setParentEntityKind(value.parentEntityKind());
            setParentEntityId(value.parentEntityId());
            setLastUpdatedAt(value.lastUpdatedAt());
            setLastUpdatedBy(value.lastUpdatedBy());
            setMimeType(value.mimeType());
            setBlob(value.blob());
            setExternalId(value.externalId());
            setProvenance(value.provenance());
            resetChangedOnNotNull();
        }
    }
}
