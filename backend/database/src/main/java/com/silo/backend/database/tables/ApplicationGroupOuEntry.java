/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ApplicationGroupOuEntryRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * app groups can include reference to org units. Apps associated to the org
 * unit are included in the group at runtime
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicationGroupOuEntry extends TableImpl<ApplicationGroupOuEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>application_group_ou_entry</code>
     */
    public static final ApplicationGroupOuEntry APPLICATION_GROUP_OU_ENTRY = new ApplicationGroupOuEntry();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ApplicationGroupOuEntryRecord> getRecordType() {
        return ApplicationGroupOuEntryRecord.class;
    }

    /**
     * The column <code>application_group_ou_entry.group_id</code>. reference to
     * the group this entry belongs to
     */
    public final TableField<ApplicationGroupOuEntryRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "reference to the group this entry belongs to");

    /**
     * The column <code>application_group_ou_entry.org_unit_id</code>. reference
     * to the org unit this entry belongs to
     */
    public final TableField<ApplicationGroupOuEntryRecord, Long> ORG_UNIT_ID = createField(DSL.name("org_unit_id"), SQLDataType.BIGINT.nullable(false), this, "reference to the org unit this entry belongs to");

    /**
     * The column <code>application_group_ou_entry.is_readonly</code>. flag to
     * indicate that the value is readonly.  Typically set if group entries are
     * added by external jobs
     */
    public final TableField<ApplicationGroupOuEntryRecord, Boolean> IS_READONLY = createField(DSL.name("is_readonly"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "flag to indicate that the value is readonly.  Typically set if group entries are added by external jobs");

    /**
     * The column <code>application_group_ou_entry.provenance</code>. indicates
     * where this record originated. Will be 'waltz' if created via the UI
     */
    public final TableField<ApplicationGroupOuEntryRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'waltz'"), SQLDataType.VARCHAR)), this, "indicates where this record originated. Will be 'waltz' if created via the UI");

    /**
     * The column <code>application_group_ou_entry.created_at</code>. the date
     * this entry was created
     */
    public final TableField<ApplicationGroupOuEntryRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "the date this entry was created");

    private ApplicationGroupOuEntry(Name alias, Table<ApplicationGroupOuEntryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApplicationGroupOuEntry(Name alias, Table<ApplicationGroupOuEntryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("app groups can include reference to org units. Apps associated to the org unit are included in the group at runtime"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>application_group_ou_entry</code> table reference
     */
    public ApplicationGroupOuEntry(String alias) {
        this(DSL.name(alias), APPLICATION_GROUP_OU_ENTRY);
    }

    /**
     * Create an aliased <code>application_group_ou_entry</code> table reference
     */
    public ApplicationGroupOuEntry(Name alias) {
        this(alias, APPLICATION_GROUP_OU_ENTRY);
    }

    /**
     * Create a <code>application_group_ou_entry</code> table reference
     */
    public ApplicationGroupOuEntry() {
        this(DSL.name("application_group_ou_entry"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public ApplicationGroupOuEntry as(String alias) {
        return new ApplicationGroupOuEntry(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ApplicationGroupOuEntry as(Name alias) {
        return new ApplicationGroupOuEntry(alias, this);
    }

    @Override
    @Nonnull
    public ApplicationGroupOuEntry as(Table<?> alias) {
        return new ApplicationGroupOuEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry rename(String name) {
        return new ApplicationGroupOuEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry rename(Name name) {
        return new ApplicationGroupOuEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry rename(Table<?> name) {
        return new ApplicationGroupOuEntry(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry where(Condition condition) {
        return new ApplicationGroupOuEntry(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupOuEntry where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupOuEntry where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupOuEntry where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ApplicationGroupOuEntry where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ApplicationGroupOuEntry whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
