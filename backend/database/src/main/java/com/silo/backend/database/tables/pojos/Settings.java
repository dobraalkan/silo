/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.ISettings;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import javax.annotation.processing.Generated;


/**
 * contains configuration data which controls the operation of Waltz.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "settings"
)
public record Settings(
    @Nonnull String name,
    @Nullable String value,
    @Nullable Boolean restricted,
    @Nullable String description
) implements ISettings {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>settings.name</code>. the key name of the setting, often
     * uses dotted notation.  Strongly recommended to put client specific
     * settings under their own namespace (i.e. mycorp.somesetting)
     */
    @Column(name = "name", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>settings.value</code>. the value of the setting, if the
     * setting is a boolean it should be entered as lowercase
     */
    @Column(name = "value", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getValue() {
        return this.value;
    }

    /**
     * Getter for <code>settings.restricted</code>. restricted settings are
     * internal to Waltz and not available via API/external calls
     */
    @Column(name = "restricted")
    @Nullable
    @Override
    public Boolean getRestricted() {
        return this.restricted;
    }

    /**
     * Getter for <code>settings.description</code>. optional comment to
     * describe this setting
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return this.description;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Settings other = (Settings) obj;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.value == null) {
            if (other.value != null)
                return false;
        }
        else if (!this.value.equals(other.value))
            return false;
        if (this.restricted == null) {
            if (other.restricted != null)
                return false;
        }
        else if (!this.restricted.equals(other.restricted))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.value == null) ? 0 : this.value.hashCode());
        result = prime * result + ((this.restricted == null) ? 0 : this.restricted.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Settings (");

        sb.append(name);
        sb.append(", ").append(value);
        sb.append(", ").append(restricted);
        sb.append(", ").append(description);

        sb.append(")");
        return sb.toString();
    }
}
