/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.pojos;


import com.silo.backend.database.tables.interfaces.IThumbnail;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.sql.Timestamp;
import java.util.Arrays;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "thumbnail"
)
public record Thumbnail(
    @Nonnull String parentEntityKind,
    @Nonnull Long parentEntityId,
    @Nullable Timestamp lastUpdatedAt,
    @Nonnull String lastUpdatedBy,
    @Nonnull String mimeType,
    @Nonnull byte[] blob,
    @Nullable String externalId,
    @Nonnull String provenance
) implements IThumbnail {

    private static final long serialVersionUID = 1L;


    /**
     * Getter for <code>thumbnail.parent_entity_kind</code>.
     */
    @Column(name = "parent_entity_kind", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getParentEntityKind() {
        return this.parentEntityKind;
    }

    /**
     * Getter for <code>thumbnail.parent_entity_id</code>.
     */
    @Column(name = "parent_entity_id", nullable = false)
    @NotNull
    @Nonnull
    @Override
    public Long getParentEntityId() {
        return this.parentEntityId;
    }

    /**
     * Getter for <code>thumbnail.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Getter for <code>thumbnail.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    /**
     * Getter for <code>thumbnail.mime_type</code>.
     */
    @Column(name = "mime_type", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getMimeType() {
        return this.mimeType;
    }

    /**
     * Getter for <code>thumbnail.blob</code>.
     */
    @Column(name = "blob", nullable = false, length = 1000000000)
    @NotNull
    @Size(max = 1000000000)
    @Nonnull
    @Override
    public byte[] getBlob() {
        return this.blob;
    }

    /**
     * Getter for <code>thumbnail.external_id</code>.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Getter for <code>thumbnail.provenance</code>.
     */
    @Column(name = "provenance", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    @Override
    public String getProvenance() {
        return this.provenance;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Thumbnail other = (Thumbnail) obj;
        if (this.parentEntityKind == null) {
            if (other.parentEntityKind != null)
                return false;
        }
        else if (!this.parentEntityKind.equals(other.parentEntityKind))
            return false;
        if (this.parentEntityId == null) {
            if (other.parentEntityId != null)
                return false;
        }
        else if (!this.parentEntityId.equals(other.parentEntityId))
            return false;
        if (this.lastUpdatedAt == null) {
            if (other.lastUpdatedAt != null)
                return false;
        }
        else if (!this.lastUpdatedAt.equals(other.lastUpdatedAt))
            return false;
        if (this.lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!this.lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (this.mimeType == null) {
            if (other.mimeType != null)
                return false;
        }
        else if (!this.mimeType.equals(other.mimeType))
            return false;
        if (this.blob == null) {
            if (other.blob != null)
                return false;
        }
        else if (!Arrays.equals(this.blob, other.blob))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        if (this.provenance == null) {
            if (other.provenance != null)
                return false;
        }
        else if (!this.provenance.equals(other.provenance))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.parentEntityKind == null) ? 0 : this.parentEntityKind.hashCode());
        result = prime * result + ((this.parentEntityId == null) ? 0 : this.parentEntityId.hashCode());
        result = prime * result + ((this.lastUpdatedAt == null) ? 0 : this.lastUpdatedAt.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.mimeType == null) ? 0 : this.mimeType.hashCode());
        result = prime * result + ((this.blob == null) ? 0 : Arrays.hashCode(this.blob));
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        result = prime * result + ((this.provenance == null) ? 0 : this.provenance.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Thumbnail (");

        sb.append(parentEntityKind);
        sb.append(", ").append(parentEntityId);
        sb.append(", ").append(lastUpdatedAt);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(mimeType);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(externalId);
        sb.append(", ").append(provenance);

        sb.append(")");
        return sb.toString();
    }
}
