/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.Settings;
import com.silo.backend.database.tables.interfaces.ISettings;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * contains configuration data which controls the operation of Waltz.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "settings"
)
public class SettingsRecord extends TableRecordImpl<SettingsRecord> implements ISettings {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>settings.name</code>. the key name of the setting, often
     * uses dotted notation.  Strongly recommended to put client specific
     * settings under their own namespace (i.e. mycorp.somesetting)
     */
    public SettingsRecord setName(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>settings.name</code>. the key name of the setting, often
     * uses dotted notation.  Strongly recommended to put client specific
     * settings under their own namespace (i.e. mycorp.somesetting)
     */
    @Column(name = "name", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>settings.value</code>. the value of the setting, if the
     * setting is a boolean it should be entered as lowercase
     */
    public SettingsRecord setValue(@Nullable String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>settings.value</code>. the value of the setting, if the
     * setting is a boolean it should be entered as lowercase
     */
    @Column(name = "value", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>settings.restricted</code>. restricted settings are
     * internal to Waltz and not available via API/external calls
     */
    public SettingsRecord setRestricted(@Nullable Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>settings.restricted</code>. restricted settings are
     * internal to Waltz and not available via API/external calls
     */
    @Column(name = "restricted")
    @Nullable
    @Override
    public Boolean getRestricted() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>settings.description</code>. optional comment to
     * describe this setting
     */
    public SettingsRecord setDescription(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>settings.description</code>. optional comment to
     * describe this setting
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(ISettings from) {
        setName(from.getName());
        setValue(from.getValue());
        setRestricted(from.getRestricted());
        setDescription(from.getDescription());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SettingsRecord
     */
    public SettingsRecord() {
        super(Settings.SETTINGS);
    }

    /**
     * Create a detached, initialised SettingsRecord
     */
    @ConstructorProperties({ "name", "value", "restricted", "description" })
    public SettingsRecord(@Nonnull String name, @Nullable String value, @Nullable Boolean restricted, @Nullable String description) {
        super(Settings.SETTINGS);

        setName(name);
        setValue(value);
        setRestricted(restricted);
        setDescription(description);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SettingsRecord
     */
    public SettingsRecord(com.silo.backend.database.tables.pojos.Settings value) {
        super(Settings.SETTINGS);

        if (value != null) {
            setName(value.name());
            setValue(value.value());
            setRestricted(value.restricted());
            setDescription(value.description());
            resetChangedOnNotNull();
        }
    }
}
