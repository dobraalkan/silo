/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.ApplicationGroup;
import com.silo.backend.database.tables.interfaces.IApplicationGroup;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * represents an ad-hoc collection of applications
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "application_group"
)
public class ApplicationGroupRecord extends TableRecordImpl<ApplicationGroupRecord> implements IApplicationGroup {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>application_group.id</code>.
     */
    public ApplicationGroupRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>application_group.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>application_group.name</code>. display name for the
     * group
     */
    public ApplicationGroupRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>application_group.name</code>. display name for the
     * group
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>application_group.kind</code>. the type of group (one
     * of: PUBLIC, PRIVATE).  Note, private groups can still be seen, they are
     * merely unlisted in the UI
     */
    public ApplicationGroupRecord setKind(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>application_group.kind</code>. the type of group (one
     * of: PUBLIC, PRIVATE).  Note, private groups can still be seen, they are
     * merely unlisted in the UI
     */
    @Column(name = "kind", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getKind() {
        return (String) get(2);
    }

    /**
     * Setter for <code>application_group.description</code>. longer description
     * of the group, supports markdown
     */
    public ApplicationGroupRecord setDescription(@Nullable String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>application_group.description</code>. longer description
     * of the group, supports markdown
     */
    @Column(name = "description", length = 1000000000)
    @Size(max = 1000000000)
    @Nullable
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>application_group.external_id</code>. external
     * identifier, typically used when creating/syncing groups via external jobs
     */
    public ApplicationGroupRecord setExternalId(@Nullable String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>application_group.external_id</code>. external
     * identifier, typically used when creating/syncing groups via external jobs
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>application_group.is_removed</code>. flag indicating if
     * the group has been deleted
     */
    public ApplicationGroupRecord setIsRemoved(@Nullable Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>application_group.is_removed</code>. flag indicating if
     * the group has been deleted
     */
    @Column(name = "is_removed")
    @Nullable
    @Override
    public Boolean getIsRemoved() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>application_group.is_favourite_group</code>. a favourite
     * group is assigned to each user to allow them to quickly bookmark apps and
     * populate the change calendar on the homepage
     */
    public ApplicationGroupRecord setIsFavouriteGroup(@Nullable Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>application_group.is_favourite_group</code>. a favourite
     * group is assigned to each user to allow them to quickly bookmark apps and
     * populate the change calendar on the homepage
     */
    @Column(name = "is_favourite_group")
    @Nullable
    @Override
    public Boolean getIsFavouriteGroup() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IApplicationGroup from) {
        setId(from.getId());
        setName(from.getName());
        setKind(from.getKind());
        setDescription(from.getDescription());
        setExternalId(from.getExternalId());
        setIsRemoved(from.getIsRemoved());
        setIsFavouriteGroup(from.getIsFavouriteGroup());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ApplicationGroupRecord
     */
    public ApplicationGroupRecord() {
        super(ApplicationGroup.APPLICATION_GROUP);
    }

    /**
     * Create a detached, initialised ApplicationGroupRecord
     */
    @ConstructorProperties({ "id", "name", "kind", "description", "externalId", "isRemoved", "isFavouriteGroup" })
    public ApplicationGroupRecord(@Nullable Long id, @Nonnull String name, @Nullable String kind, @Nullable String description, @Nullable String externalId, @Nullable Boolean isRemoved, @Nullable Boolean isFavouriteGroup) {
        super(ApplicationGroup.APPLICATION_GROUP);

        setId(id);
        setName(name);
        setKind(kind);
        setDescription(description);
        setExternalId(externalId);
        setIsRemoved(isRemoved);
        setIsFavouriteGroup(isFavouriteGroup);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ApplicationGroupRecord
     */
    public ApplicationGroupRecord(com.silo.backend.database.tables.pojos.ApplicationGroup value) {
        super(ApplicationGroup.APPLICATION_GROUP);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setKind(value.kind());
            setDescription(value.description());
            setExternalId(value.externalId());
            setIsRemoved(value.isRemoved());
            setIsFavouriteGroup(value.isFavouriteGroup());
            resetChangedOnNotNull();
        }
    }
}
