/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.DatabaseInformation;
import com.silo.backend.database.tables.interfaces.IDatabaseInformation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Date;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "database_information"
)
public class DatabaseInformationRecord extends TableRecordImpl<DatabaseInformationRecord> implements IDatabaseInformation {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>database_information.id</code>.
     */
    public DatabaseInformationRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>database_information.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>database_information.database_name</code>.
     */
    public DatabaseInformationRecord setDatabaseName(@Nullable String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>database_information.database_name</code>.
     */
    @Column(name = "database_name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getDatabaseName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>database_information.instance_name</code>.
     */
    public DatabaseInformationRecord setInstanceName(@Nullable String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>database_information.instance_name</code>.
     */
    @Column(name = "instance_name", length = 255)
    @Size(max = 255)
    @Nullable
    @Override
    public String getInstanceName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>database_information.dbms_vendor</code>.
     */
    public DatabaseInformationRecord setDbmsVendor(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>database_information.dbms_vendor</code>.
     */
    @Column(name = "dbms_vendor", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getDbmsVendor() {
        return (String) get(3);
    }

    /**
     * Setter for <code>database_information.dbms_name</code>.
     */
    public DatabaseInformationRecord setDbmsName(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>database_information.dbms_name</code>.
     */
    @Column(name = "dbms_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getDbmsName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>database_information.dbms_version</code>.
     */
    public DatabaseInformationRecord setDbmsVersion(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>database_information.dbms_version</code>.
     */
    @Column(name = "dbms_version", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    @Override
    public String getDbmsVersion() {
        return (String) get(5);
    }

    /**
     * Setter for <code>database_information.external_id</code>.
     */
    public DatabaseInformationRecord setExternalId(@Nullable String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>database_information.external_id</code>.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>database_information.end_of_life_date</code>.
     */
    public DatabaseInformationRecord setEndOfLifeDate(@Nullable Date value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>database_information.end_of_life_date</code>.
     */
    @Column(name = "end_of_life_date")
    @Nullable
    @Override
    public Date getEndOfLifeDate() {
        return (Date) get(7);
    }

    /**
     * Setter for <code>database_information.lifecycle_status</code>.
     */
    public DatabaseInformationRecord setLifecycleStatus(@Nullable String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>database_information.lifecycle_status</code>.
     */
    @Column(name = "lifecycle_status", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getLifecycleStatus() {
        return (String) get(8);
    }

    /**
     * Setter for <code>database_information.provenance</code>.
     */
    public DatabaseInformationRecord setProvenance(@Nullable String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>database_information.provenance</code>.
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IDatabaseInformation from) {
        setId(from.getId());
        setDatabaseName(from.getDatabaseName());
        setInstanceName(from.getInstanceName());
        setDbmsVendor(from.getDbmsVendor());
        setDbmsName(from.getDbmsName());
        setDbmsVersion(from.getDbmsVersion());
        setExternalId(from.getExternalId());
        setEndOfLifeDate(from.getEndOfLifeDate());
        setLifecycleStatus(from.getLifecycleStatus());
        setProvenance(from.getProvenance());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatabaseInformationRecord
     */
    public DatabaseInformationRecord() {
        super(DatabaseInformation.DATABASE_INFORMATION);
    }

    /**
     * Create a detached, initialised DatabaseInformationRecord
     */
    @ConstructorProperties({ "id", "databaseName", "instanceName", "dbmsVendor", "dbmsName", "dbmsVersion", "externalId", "endOfLifeDate", "lifecycleStatus", "provenance" })
    public DatabaseInformationRecord(@Nullable Long id, @Nullable String databaseName, @Nullable String instanceName, @Nonnull String dbmsVendor, @Nonnull String dbmsName, @Nonnull String dbmsVersion, @Nullable String externalId, @Nullable Date endOfLifeDate, @Nullable String lifecycleStatus, @Nullable String provenance) {
        super(DatabaseInformation.DATABASE_INFORMATION);

        setId(id);
        setDatabaseName(databaseName);
        setInstanceName(instanceName);
        setDbmsVendor(dbmsVendor);
        setDbmsName(dbmsName);
        setDbmsVersion(dbmsVersion);
        setExternalId(externalId);
        setEndOfLifeDate(endOfLifeDate);
        setLifecycleStatus(lifecycleStatus);
        setProvenance(provenance);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DatabaseInformationRecord
     */
    public DatabaseInformationRecord(com.silo.backend.database.tables.pojos.DatabaseInformation value) {
        super(DatabaseInformation.DATABASE_INFORMATION);

        if (value != null) {
            setId(value.id());
            setDatabaseName(value.databaseName());
            setInstanceName(value.instanceName());
            setDbmsVendor(value.dbmsVendor());
            setDbmsName(value.dbmsName());
            setDbmsVersion(value.dbmsVersion());
            setExternalId(value.externalId());
            setEndOfLifeDate(value.endOfLifeDate());
            setLifecycleStatus(value.lifecycleStatus());
            setProvenance(value.provenance());
            resetChangedOnNotNull();
        }
    }
}
