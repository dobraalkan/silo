/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.interfaces;


import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;

import javax.annotation.processing.Generated;


/**
 * Describes types of relationships between entities
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "relationship_kind"
)
public interface IRelationshipKind extends Serializable {

    /**
     * Getter for <code>relationship_kind.id</code>.
     */
    @Column(name = "id")
    @Nullable
    public Long getId();

    /**
     * Getter for <code>relationship_kind.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    public String getName();

    /**
     * Getter for <code>relationship_kind.description</code>.
     */
    @Column(name = "description", length = 4000)
    @Size(max = 4000)
    @Nullable
    public String getDescription();

    /**
     * Getter for <code>relationship_kind.kind_a</code>.
     */
    @Column(name = "kind_a", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    public String getKindA();

    /**
     * Getter for <code>relationship_kind.kind_b</code>.
     */
    @Column(name = "kind_b", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    public String getKindB();

    /**
     * Getter for <code>relationship_kind.category_a</code>. Placeholder: if
     * kind_a is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_a")
    @Nullable
    public Long getCategoryA();

    /**
     * Getter for <code>relationship_kind.category_b</code>. Placeholder: if
     * kind_b is a MEASURABLE then this may (optionally) be used to restrict it
     * based on category
     */
    @Column(name = "category_b")
    @Nullable
    public Long getCategoryB();

    /**
     * Getter for <code>relationship_kind.is_readonly</code>.
     */
    @Column(name = "is_readonly")
    @Nullable
    public Boolean getIsReadonly();

    /**
     * Getter for <code>relationship_kind.code</code>.
     */
    @Column(name = "code", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    @Nonnull
    public String getCode();

    /**
     * Getter for <code>relationship_kind.position</code>.
     */
    @Column(name = "position")
    @Nullable
    public Integer getPosition();

    /**
     * Getter for <code>relationship_kind.reverse_name</code>.
     */
    @Column(name = "reverse_name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    public String getReverseName();
}
