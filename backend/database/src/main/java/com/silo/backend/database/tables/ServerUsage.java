/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables;


import com.silo.backend.database.DefaultSchema;
import com.silo.backend.database.tables.records.ServerUsageRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.sql.Timestamp;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ServerUsage extends TableImpl<ServerUsageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>server_usage</code>
     */
    public static final ServerUsage SERVER_USAGE = new ServerUsage();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ServerUsageRecord> getRecordType() {
        return ServerUsageRecord.class;
    }

    /**
     * The column <code>server_usage.server_id</code>.
     */
    public final TableField<ServerUsageRecord, Long> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>server_usage.entity_kind</code>.
     */
    public final TableField<ServerUsageRecord, String> ENTITY_KIND = createField(DSL.name("entity_kind"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>server_usage.entity_id</code>.
     */
    public final TableField<ServerUsageRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>server_usage.environment</code>.
     */
    public final TableField<ServerUsageRecord, String> ENVIRONMENT = createField(DSL.name("environment"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>server_usage.last_updated_at</code>.
     */
    public final TableField<ServerUsageRecord, Timestamp> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>server_usage.last_updated_by</code>.
     */
    public final TableField<ServerUsageRecord, String> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>server_usage.provenance</code>.
     */
    public final TableField<ServerUsageRecord, String> PROVENANCE = createField(DSL.name("provenance"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>server_usage.id</code>.
     */
    public final TableField<ServerUsageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private ServerUsage(Name alias, Table<ServerUsageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerUsage(Name alias, Table<ServerUsageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>server_usage</code> table reference
     */
    public ServerUsage(String alias) {
        this(DSL.name(alias), SERVER_USAGE);
    }

    /**
     * Create an aliased <code>server_usage</code> table reference
     */
    public ServerUsage(Name alias) {
        this(alias, SERVER_USAGE);
    }

    /**
     * Create a <code>server_usage</code> table reference
     */
    public ServerUsage() {
        this(DSL.name("server_usage"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @Nonnull
    public Identity<ServerUsageRecord, Long> getIdentity() {
        return (Identity<ServerUsageRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public ServerUsage as(String alias) {
        return new ServerUsage(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ServerUsage as(Name alias) {
        return new ServerUsage(alias, this);
    }

    @Override
    @Nonnull
    public ServerUsage as(Table<?> alias) {
        return new ServerUsage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerUsage rename(String name) {
        return new ServerUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerUsage rename(Name name) {
        return new ServerUsage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerUsage rename(Table<?> name) {
        return new ServerUsage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage where(Condition condition) {
        return new ServerUsage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerUsage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerUsage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerUsage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ServerUsage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ServerUsage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
