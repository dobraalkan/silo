/*
 * This file is generated by jOOQ.
 */
package com.silo.backend.database.tables.records;


import com.silo.backend.database.tables.Actor;
import com.silo.backend.database.tables.interfaces.IActor;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * represents a non application entity, typically used in flows.  Examples
 * include exchanges, departments, counterpart organisations
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "actor"
)
public class ActorRecord extends TableRecordImpl<ActorRecord> implements IActor {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>actor.id</code>.
     */
    public ActorRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>actor.id</code>.
     */
    @Column(name = "id")
    @Nullable
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>actor.name</code>. short name identifying the actor
     * (i.e. Bank of England)
     */
    public ActorRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>actor.name</code>. short name identifying the actor
     * (i.e. Bank of England)
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>actor.description</code>. longer textual description of
     * the actor
     */
    public ActorRecord setDescription(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>actor.description</code>. longer textual description of
     * the actor
     */
    @Column(name = "description", nullable = false, length = 4000)
    @NotNull
    @Size(max = 4000)
    @Nonnull
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>actor.last_updated_at</code>.
     */
    public ActorRecord setLastUpdatedAt(@Nullable Timestamp value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>actor.last_updated_at</code>.
     */
    @Column(name = "last_updated_at", precision = 6)
    @Nullable
    @Override
    public Timestamp getLastUpdatedAt() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>actor.last_updated_by</code>.
     */
    public ActorRecord setLastUpdatedBy(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>actor.last_updated_by</code>.
     */
    @Column(name = "last_updated_by", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Nonnull
    @Override
    public String getLastUpdatedBy() {
        return (String) get(4);
    }

    /**
     * Setter for <code>actor.is_external</code>. flag to indicate whether this
     * is an internal actor (e.g. Chief Risk Officer) or external actor (e.g.
     * Bank of England)
     */
    public ActorRecord setIsExternal(@Nullable Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>actor.is_external</code>. flag to indicate whether this
     * is an internal actor (e.g. Chief Risk Officer) or external actor (e.g.
     * Bank of England)
     */
    @Column(name = "is_external")
    @Nullable
    @Override
    public Boolean getIsExternal() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>actor.provenance</code>. where did this actor record
     * originate, will be 'waltz' if provided via the UI
     */
    public ActorRecord setProvenance(@Nullable String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>actor.provenance</code>. where did this actor record
     * originate, will be 'waltz' if provided via the UI
     */
    @Column(name = "provenance", length = 64)
    @Size(max = 64)
    @Nullable
    @Override
    public String getProvenance() {
        return (String) get(6);
    }

    /**
     * Setter for <code>actor.external_id</code>. identifier this actor is known
     * by externally.  Should not change, unlike the name which may change.
     */
    public ActorRecord setExternalId(@Nullable String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>actor.external_id</code>. identifier this actor is known
     * by externally.  Should not change, unlike the name which may change.
     */
    @Column(name = "external_id", length = 200)
    @Size(max = 200)
    @Nullable
    @Override
    public String getExternalId() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IActor from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
        setLastUpdatedAt(from.getLastUpdatedAt());
        setLastUpdatedBy(from.getLastUpdatedBy());
        setIsExternal(from.getIsExternal());
        setProvenance(from.getProvenance());
        setExternalId(from.getExternalId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActorRecord
     */
    public ActorRecord() {
        super(Actor.ACTOR);
    }

    /**
     * Create a detached, initialised ActorRecord
     */
    @ConstructorProperties({ "id", "name", "description", "lastUpdatedAt", "lastUpdatedBy", "isExternal", "provenance", "externalId" })
    public ActorRecord(@Nullable Long id, @Nonnull String name, @Nonnull String description, @Nullable Timestamp lastUpdatedAt, @Nonnull String lastUpdatedBy, @Nullable Boolean isExternal, @Nullable String provenance, @Nullable String externalId) {
        super(Actor.ACTOR);

        setId(id);
        setName(name);
        setDescription(description);
        setLastUpdatedAt(lastUpdatedAt);
        setLastUpdatedBy(lastUpdatedBy);
        setIsExternal(isExternal);
        setProvenance(provenance);
        setExternalId(externalId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ActorRecord
     */
    public ActorRecord(com.silo.backend.database.tables.pojos.Actor value) {
        super(Actor.ACTOR);

        if (value != null) {
            setId(value.id());
            setName(value.name());
            setDescription(value.description());
            setLastUpdatedAt(value.lastUpdatedAt());
            setLastUpdatedBy(value.lastUpdatedBy());
            setIsExternal(value.isExternal());
            setProvenance(value.provenance());
            setExternalId(value.externalId());
            resetChangedOnNotNull();
        }
    }
}
